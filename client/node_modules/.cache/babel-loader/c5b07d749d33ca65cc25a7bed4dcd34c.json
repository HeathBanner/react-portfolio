{"ast":null,"code":"import _toConsumableArray from \"/Users/God/Desktop/github/Port/portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/God/Desktop/github/Port/portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/God/Desktop/github/Port/portfolio/client/src/pages/Chat/Chat.js\";\nimport React, { Fragment, useEffect, useState, useContext, useRef } from 'react';\nimport { COMMUNITY_CHAT, MESSAGE_SENT, MESSAGE_RECIEVED, TYPING } from '../../socket/events';\nimport AuthContext from '../../context/AuthContext';\nimport SideBar from './SideBar';\nimport ChatHeading from './chatHeading';\nimport Messages from './messages/Messages';\nimport MessageInput from './messages/MessageInput';\n\nfunction Chat(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      chats = _useState2[0],\n      setChats = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      activeChat = _useState4[0],\n      setActiveChat = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loaded = _useState6[0],\n      setLoaded = _useState6[1];\n\n  var auth = useContext(AuthContext);\n  var ref = React.forwardRef(auth.sockUser);\n  useEffect(function () {\n    if (!loaded && auth.socket) {\n      setLoaded(true);\n      var socket = props.socket;\n      auth.socket.emit(COMMUNITY_CHAT, resetChat);\n    }\n  });\n\n  function resetChat(chat) {\n    return addChat(chat, true);\n  }\n\n  function addChat(chat, reset) {\n    var socket = props.socket;\n    var newChats = reset ? [chat] : [].concat(_toConsumableArray(chats), [chat]);\n    setChats({\n      chats: newChats\n    });\n    setActiveChat({\n      activeChat: reset ? chat : activeChat\n    });\n    var messageEvent = \"\".concat(MESSAGE_RECIEVED, \"=\").concat(chat.id);\n    var typingEvent = \"\".concat(TYPING, \"=\").concat(chat.id);\n    auth.socket.on(typingEvent, updateTypingChat(chat.id));\n    auth.socket.on(messageEvent, addMessageToChat(chat.id));\n  }\n\n  function addMessageToChat(chatId) {\n    return function (message) {\n      var newChats = chats.map(function (chat) {\n        if (chat.id === chatId) {\n          chat.messages.push(message);\n        }\n\n        return chat;\n      });\n      setChats({\n        chats: newChats\n      });\n    };\n  }\n\n  function updateTypingChat(chatId) {\n    return function (_ref) {\n      var isTyping = _ref.isTyping,\n          user = _ref.user;\n\n      if (user !== props.user.name) {\n        var newChats = chats.map(function (chat) {\n          if (chat.id === chatId) {\n            if (isTyping && !chat.typingUsers.includes(user)) {\n              chat.typingUsers.push(user);\n            } else if (!isTyping && chat.typingUser.includes(user)) {\n              chat.typingUsers = chat.typingUsers.filter(function (u) {\n                return u !== user;\n              });\n            }\n          }\n\n          return chat;\n        });\n        setChats({\n          chats: newChats\n        });\n      }\n    };\n  }\n\n  function sendTyping(chatId, message) {\n    var socket = props.socket;\n    socket.emit(MESSAGE_SENT, {\n      chatId: chatId,\n      message: message\n    });\n  }\n\n  function updateActiveChat(activeChat) {\n    setActiveChat(activeChat);\n  }\n\n  function renderChat() {\n    var _this = this;\n\n    if (auth.sockUser) {\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(SideBar, {\n        logout: props.logout,\n        chats: chats,\n        ref: ref,\n        activeChat: activeChat,\n        setActiveChat: updateActiveChat,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"chat-room-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, activeChat !== null ? React.createElement(\"div\", {\n        className: \"chat-room\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(ChatHeading, {\n        name: activeChat.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }), React.createElement(Messages, {\n        messages: activeChat.messages,\n        ref: ref,\n        typingUsers: activeChat.typingUsers,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }), React.createElement(MessageInput, {\n        sendMessage: function sendMessage(message) {\n          _this.sendMessage(activeChat.id, message);\n        },\n        sendTyping: function sendTyping(isTyping) {\n          _this.sendTyping(activeChat.id, isTyping);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      })) : React.createElement(\"div\", {\n        className: \"chat-room choose\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"Choose a chat!\")))));\n    } else {\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      });\n    }\n  }\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, renderChat());\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/God/Desktop/github/Port/portfolio/client/src/pages/Chat/Chat.js"],"names":["React","Fragment","useEffect","useState","useContext","useRef","COMMUNITY_CHAT","MESSAGE_SENT","MESSAGE_RECIEVED","TYPING","AuthContext","SideBar","ChatHeading","Messages","MessageInput","Chat","props","chats","setChats","activeChat","setActiveChat","loaded","setLoaded","auth","ref","forwardRef","sockUser","socket","emit","resetChat","chat","addChat","reset","newChats","messageEvent","id","typingEvent","on","updateTypingChat","addMessageToChat","chatId","message","map","messages","push","isTyping","user","name","typingUsers","includes","typingUser","filter","u","sendTyping","updateActiveChat","renderChat","logout","sendMessage"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState, useContext, useRef } from 'react';\n\nimport { COMMUNITY_CHAT, MESSAGE_SENT, MESSAGE_RECIEVED, TYPING } from '../../socket/events';\nimport AuthContext from '../../context/AuthContext';\n\nimport SideBar from './SideBar';\nimport ChatHeading from './chatHeading';\nimport Messages from './messages/Messages';\nimport MessageInput from './messages/MessageInput';\n\nfunction Chat(props) {\n\n    const [chats, setChats] = useState([]);\n    const [activeChat, setActiveChat] = useState('');\n    const [loaded, setLoaded] = useState(false);\n\n    const auth = useContext(AuthContext);\n    const ref = React.forwardRef(auth.sockUser);\n\n    useEffect(() => {\n        if(!loaded && auth.socket) {\n            setLoaded(true);\n            const { socket } = props;\n            auth.socket.emit(COMMUNITY_CHAT, resetChat);\n        }\n    })\n\n    function resetChat(chat) {\n        return addChat(chat, true);\n    }\n\n    function addChat(chat, reset) {\n        const { socket } = props;\n        const newChats = reset ? [chat] : [...chats, chat];\n        setChats({chats: newChats})\n        setActiveChat({activeChat:reset ? chat : activeChat});\n        const messageEvent = `${MESSAGE_RECIEVED}=${chat.id}`;\n        const typingEvent = `${TYPING}=${chat.id}`;\n        \n        auth.socket.on(typingEvent, updateTypingChat(chat.id));\n        auth.socket.on(messageEvent, addMessageToChat(chat.id));\n    } \n\n    function addMessageToChat(chatId) {\n        return message => {\n            let newChats = chats.map((chat) => {\n                if (chat.id === chatId) {\n                    chat.messages.push(message);\n                }\n                return chat;\n            });\n            setChats({chats: newChats});\n        };\n    }\n\n    function updateTypingChat(chatId) {\n        return ({isTyping, user}) => {\n            if(user !== props.user.name) {\n                let newChats = chats.map((chat) => {\n                    if(chat.id === chatId) {\n                        if(isTyping && !chat.typingUsers.includes(user)) {\n                            chat.typingUsers.push(user);\n                        } else if (!isTyping && chat.typingUser.includes(user)) {\n                            chat.typingUsers = chat.typingUsers.filter(u => u !== user)\n                        }\n                    }\n                    return chat;\n                })\n                setChats({chats: newChats});\n            }\n        }\n    }\n\n    function sendTyping(chatId, message) {\n        const { socket } = props;\n        socket.emit(MESSAGE_SENT, {chatId, message});\n    }\n\n    function updateActiveChat(activeChat) {\n        setActiveChat(activeChat);\n    }\n\n    function renderChat() {\n        if(auth.sockUser){\n            return (\n                <Fragment>\n                        <div className=\"container\">\n                            <SideBar\n                                logout={props.logout}\n                                chats={chats}\n                                ref={ref}\n                                activeChat={activeChat}\n                                setActiveChat={updateActiveChat}\n                                />\n                            <div className=\"chat-room-container\">\n                                {\n                                    activeChat !== null ? (\n        \n                                        <div className=\"chat-room\">\n                                            <ChatHeading name={activeChat.name} />\n                                            <Messages \n                                                messages={activeChat.messages}\n                                                ref={ref}\n                                                typingUsers={activeChat.typingUsers}\n                                            />\n                                            <MessageInput \n                                                sendMessage={\n                                                    (message)=>{\n                                                        this.sendMessage(activeChat.id, message)\n                                                    }\n                                                }\n                                                sendTyping={\n                                                    (isTyping)=>{\n                                                        this.sendTyping(activeChat.id, isTyping)\n                                                    }\n                                                }\n                                            />\n        \n                                        </div>\n                                    ):\n                                    <div className=\"chat-room choose\">\n                                        <h3>Choose a chat!</h3>\n                                    </div>\n                                }\n                            </div>\n        \n                        </div>\n                </Fragment>\n            );\n        } else {\n            return (\n                <Fragment>\n    \n                </Fragment>\n            );\n        }\n    }\n\n    return (\n        <Fragment>\n            {renderChat()}\n        </Fragment>\n    )\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}