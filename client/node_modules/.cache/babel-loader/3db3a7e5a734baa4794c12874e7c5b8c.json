{"ast":null,"code":"import _slicedToArray from \"/Users/God/Desktop/github/Port/react-portfolio/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/God/Desktop/github/Port/react-portfolio/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/God/Desktop/github/Port/react-portfolio/client/src/components/Showcase/Social/Timeline.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext, Fragment, useState, useEffect } from 'react';\nimport AuthContext from '../../../context/AuthContext';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Paper, TextField, Collapse, List, ListItem, ListItemText, ListItemAvatar, Divider, Avatar, Icon, IconButton, CircularProgress } from '@material-ui/core';\nimport Moment from 'react-moment';\nimport GetMoment from 'moment';\nvar useStyles = makeStyles(function (theme) {\n  var _root;\n\n  return {\n    root: (_root = {}, _defineProperty(_root, theme.breakpoints.down('xs'), {\n      width: '90%'\n    }), _defineProperty(_root, \"paddingTop\", '10px'), _defineProperty(_root, \"paddingBottom\", '10px'), _defineProperty(_root, \"width\", '80%'), _defineProperty(_root, \"margin\", '0 auto'), _root),\n    listItem: {\n      marginTop: '20px'\n    },\n    form: {\n      display: 'flex',\n      alignItems: 'center'\n    },\n    Collapse: {\n      marginBottom: '20px'\n    }\n  };\n});\n\nvar Timeline = function Timeline() {\n  var auth = useContext(AuthContext);\n  var classes = useStyles();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      commentInput = _useState2[0],\n      setCommentInput = _useState2[1];\n\n  var _useState3 = useState({\n    open: false,\n    storyId: ''\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      newComment = _useState4[0],\n      setNewComment = _useState4[1];\n\n  var _useState5 = useState({}),\n      _useState6 = _slicedToArray(_useState5, 2),\n      storyIDs = _useState6[0],\n      setStoryIDs = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      stories = _useState8[0],\n      setStories = _useState8[1];\n\n  useEffect(function () {\n    if (auth.isLoaded && auth.newStory) {\n      auth.updateLoaded(auth.user, false, false);\n      getStories();\n    }\n\n    if (!stories && auth.user) {\n      var storyStorage = [];\n      var storyIDList = {};\n      auth.user.info.authored_stories.map(function (story) {\n        storyIDList[story._id] = false;\n        storyStorage.push(story);\n      });\n      storyStorage.sort(function (a, b) {\n        return new Date(b.time) - new Date(a.time);\n      });\n      setStoryIDs(storyIDList);\n      setStories(storyStorage);\n    }\n\n    if (newComment.open) {\n      setNewComment({\n        open: false,\n        storyId: ''\n      });\n      var _storyStorage = [];\n      var _storyIDList = {};\n      stories.map(function (story) {\n        if (story._id === newComment.storyId) {\n          _storyStorage.push(story);\n\n          _storyIDList[story._id] = true;\n        } else {\n          _storyIDList[story._id] = false;\n\n          _storyStorage.push(story);\n        }\n      });\n\n      _storyStorage.sort(function (a, b) {\n        return new Date(b.time) - new Date(a.time);\n      });\n\n      setStoryIDs(_storyIDList);\n      setStories(_storyStorage);\n    }\n  }, [stories, storyIDs, newComment, auth]);\n\n  var getStories = function getStories() {\n    fetch('/api/social/friendStories', {\n      method: 'POST',\n      body: JSON.stringify({\n        id: auth.user.info\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (result) {\n      var storyStorage = result;\n      var storyIDList = {};\n      auth.user.info.authored_stories.map(function (story, index) {\n        storyIDList[story._id] = false;\n        storyStorage.push(story);\n      });\n      storyStorage.sort(function (a, b) {\n        return new Date(b.time) - new Date(a.time);\n      });\n      setStories(storyStorage);\n      setStoryIDs(storyIDList);\n    });\n  };\n\n  var handleDelete = function handleDelete(id) {\n    fetch('/api/social/deleteStory', {\n      method: 'POST',\n      body: JSON.stringify({\n        id: id\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function () {});\n  };\n\n  var handleCommentInput = function handleCommentInput(e) {\n    var value = e.target.value;\n    setCommentInput(value);\n  };\n\n  var handleCommentSubmit = function handleCommentSubmit(id, username) {\n    var time = GetMoment();\n    var data = {\n      time: time,\n      id: id,\n      userId: auth.user._id,\n      comment: commentInput\n    };\n    var newStories = stories;\n    newStories.map(function (item, index) {\n      if (item._id === id) {\n        newStories[index].comments.push({\n          authored_by: {\n            info: '5d126d136f6f1085c8df8b81',\n            username: username\n          },\n          text: commentInput,\n          type: 'comment',\n          time: time\n        });\n      }\n    });\n    setStories(newStories);\n    setNewComment({\n      open: true,\n      storyId: id\n    });\n    fetch('/api/social/newComment', {\n      method: 'POST',\n      body: JSON.stringify({\n        data: data\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function () {\n      setCommentInput('');\n    });\n  };\n\n  var renderTimeline = function renderTimeline() {\n    if (stories && !auth.newStory) {\n      return stories.map(function (story) {\n        return React.createElement(Paper, {\n          key: story._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        }, React.createElement(ListItem, {\n          className: classes.listItem,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        }, React.createElement(ListItemAvatar, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163\n          },\n          __self: this\n        }, React.createElement(Avatar, {\n          alt: story._id,\n          src: \"./imgs/me.png\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          },\n          __self: this\n        })), React.createElement(ListItemText, {\n          primary: \"\".concat(story.authored_by.username, \": \").concat(story.text),\n          secondary: React.createElement(Moment, {\n            date: story.time,\n            format: 'dddd h:mm a',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 169\n            },\n            __self: this\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167\n          },\n          __self: this\n        }), React.createElement(IconButton, {\n          onClick: function onClick() {\n            return expandComment(story._id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172\n          },\n          __self: this\n        }, React.createElement(Icon, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173\n          },\n          __self: this\n        }, storyIDs ? storyIDs[story._id] ? 'expand_less' : 'expand_more' : false)), React.createElement(IconButton, {\n          onClick: function onClick() {\n            return handleDelete(story._id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176\n          },\n          __self: this\n        }, React.createElement(Icon, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177\n          },\n          __self: this\n        }, \"delete_outline\"))), React.createElement(Collapse, {\n          className: classes.collapse,\n          in: storyIDs ? storyIDs[story._id] : false,\n          timeout: \"auto\",\n          unmountOnExit: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182\n          },\n          __self: this\n        }, React.createElement(List, {\n          disablePadding: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184\n          },\n          __self: this\n        }, renderComments(story.comments)), React.createElement(\"div\", {\n          className: classes.form,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188\n          },\n          __self: this\n        }, React.createElement(TextField, {\n          name: \"123\",\n          value: commentInput,\n          variant: \"outlined\",\n          label: \"Add a comment\",\n          onChange: handleCommentInput,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190\n          },\n          __self: this\n        }), React.createElement(IconButton, {\n          onClick: function onClick() {\n            return handleCommentSubmit(story._id, story.authored_by.username);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198\n          },\n          __self: this\n        }, React.createElement(Icon, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199\n          },\n          __self: this\n        }, \"add_circle\")))));\n      });\n    } else {\n      return React.createElement(CircularProgress, {\n        size: 100,\n        color: \"secondary\",\n        thickness: 2.6,\n        style: {\n          display: 'block',\n          margin: '40px auto 0px auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      });\n    }\n  };\n\n  var renderComments = function renderComments(comments) {\n    var commentList = [];\n\n    if (comments.length < 5) {\n      commentList = comments.slice(0, comments.length);\n    } else {\n      commentList = comments.slice(0, 5);\n    }\n\n    return commentList.map(function (comment, index) {\n      return React.createElement(Fragment, {\n        key: comment.time,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, React.createElement(Divider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }), React.createElement(ListItem, {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(ListItemText, {\n        primary: \"\".concat(comment.authored_by.username, \": \").concat(comment.text),\n        secondary: React.createElement(Moment, {\n          date: comment.time,\n          format: 'dddd h:mm a',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      })));\n    });\n  };\n\n  var expandComment = function expandComment(id) {\n    var newCommentState = !storyIDs[id];\n    setStoryIDs(_objectSpread({}, storyIDs, _defineProperty({}, id, newCommentState)));\n  };\n\n  return React.createElement(List, {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }, renderTimeline());\n};\n\nexport default Timeline;","map":{"version":3,"sources":["/Users/God/Desktop/github/Port/react-portfolio/client/src/components/Showcase/Social/Timeline.js"],"names":["React","useContext","Fragment","useState","useEffect","AuthContext","makeStyles","Paper","TextField","Collapse","List","ListItem","ListItemText","ListItemAvatar","Divider","Avatar","Icon","IconButton","CircularProgress","Moment","GetMoment","useStyles","theme","root","breakpoints","down","width","listItem","marginTop","form","display","alignItems","marginBottom","Timeline","auth","classes","commentInput","setCommentInput","open","storyId","newComment","setNewComment","storyIDs","setStoryIDs","stories","setStories","isLoaded","newStory","updateLoaded","user","getStories","storyStorage","storyIDList","info","authored_stories","map","story","_id","push","sort","a","b","Date","time","fetch","method","body","JSON","stringify","id","headers","then","res","json","result","index","handleDelete","handleCommentInput","e","value","target","handleCommentSubmit","username","data","userId","comment","newStories","item","comments","authored_by","text","type","renderTimeline","expandComment","collapse","renderComments","margin","commentList","length","slice","newCommentState"],"mappings":"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","sourcesContent":["import React, { useContext, Fragment, useState, useEffect } from 'react';\n\nimport AuthContext from '../../../context/AuthContext';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Paper, TextField, Collapse, List, ListItem, ListItemText, ListItemAvatar, Divider, Avatar, Icon, IconButton, CircularProgress} from '@material-ui/core';\n\nimport Moment from 'react-moment';\nimport GetMoment from 'moment';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        [theme.breakpoints.down('xs')]: {\n            width: '90%',\n        },\n        paddingTop: '10px',\n        paddingBottom: '10px',\n        width: '80%',\n        margin: '0 auto'\n    },\n    listItem: {\n        marginTop: '20px',\n    },\n    form: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    Collapse: {\n        marginBottom: '20px',\n    },\n}));\n\nconst Timeline = () => {\n\n    const auth = useContext(AuthContext);\n    const classes = useStyles();\n\n    const [commentInput, setCommentInput] = useState('');\n    const [newComment, setNewComment] = useState({open: false, storyId: ''});\n\n    const [storyIDs, setStoryIDs] = useState({});\n    const [stories, setStories] = useState('');\n\n    useEffect(() => {\n        \n        if ( (auth.isLoaded) && (auth.newStory) ) {\n            auth.updateLoaded(auth.user, false, false);\n            getStories();\n        }\n\n        if ( (!stories) && (auth.user) ) {\n            let storyStorage = [];\n            let storyIDList = {}; \n            auth.user.info.authored_stories.map((story) => {\n                storyIDList[story._id] = false;\n                storyStorage.push(story);\n            });\n            storyStorage.sort((a, b) => {\n                return new Date(b.time) - new Date(a.time);\n            });\n            setStoryIDs(storyIDList);\n            setStories(storyStorage);\n        }   \n\n        if (newComment.open) {\n            setNewComment({ open: false, storyId: '' });\n            let storyStorage = [];\n            let storyIDList = {};\n            stories.map((story) => {\n                if (story._id === newComment.storyId) {\n                    storyStorage.push(story); \n                    storyIDList[story._id] = true\n                } else {\n                    storyIDList[story._id] = false\n                    storyStorage.push(story); \n                }\n            });\n            storyStorage.sort((a, b) => {\n                return new Date(b.time) - new Date(a.time);\n            });\n            setStoryIDs(storyIDList);\n            setStories(storyStorage);\n        }\n    }, [stories, storyIDs, newComment, auth]);\n\n    const getStories = () => {\n        fetch('/api/social/friendStories', {\n            method: 'POST',\n            body: JSON.stringify({ id: auth.user.info }),\n            headers: { 'Content-Type': 'application/json' }\n        })\n            .then(res => res.json())\n            .then((result) => {\n                let storyStorage = result;\n                let storyIDList = {};\n                auth.user.info.authored_stories.map((story, index) => {\n                    storyIDList[story._id] = false;\n                    storyStorage.push(story);\n                });\n                storyStorage.sort((a, b) => {\n                    return new Date(b.time) - new Date(a.time);\n                });\n                setStories(storyStorage);\n                setStoryIDs(storyIDList);\n            });\n    };\n    \n    const handleDelete = (id) => {\n        fetch('/api/social/deleteStory', {\n            method: 'POST',\n            body: JSON.stringify({ id }),\n            headers: { 'Content-Type': 'application/json' }\n        })\n        .then(() => {});\n    };\n\n    const handleCommentInput = (e) => {\n        const { value } = e.target;\n        setCommentInput(value);\n    };\n\n    const handleCommentSubmit = (id, username) => {\n        const time = GetMoment(); \n        const data = {\n            time: time,\n            id: id,\n            userId: auth.user._id,\n            comment: commentInput,\n        };\n        let newStories = stories;\n        newStories.map((item, index) => {    \n            if(item._id === id) {\n                newStories[index].comments.push({\n                    authored_by: { info: '5d126d136f6f1085c8df8b81', username },\n                    text: commentInput,\n                    type: 'comment',\n                    time,\n                });\n            }\n        });\n        setStories(newStories);\n        setNewComment({ open: true, storyId: id });\n        fetch('/api/social/newComment', {\n            method: 'POST',\n            body: JSON.stringify({ data }),\n            headers: { 'Content-Type': 'application/json' }\n        })\n            .then(res => res.json())\n            .then(() => {\n                setCommentInput('');\n            });\n    };\n\n    const renderTimeline = () => {\n        if( (stories) && (!auth.newStory) ){\n            return (\n                stories.map((story) => (\n\n                    <Paper key={story._id}>\n\n                        <ListItem className={classes.listItem}>\n\n                            <ListItemAvatar>\n                                <Avatar alt={story._id} src={`./imgs/me.png`} />\n                            </ListItemAvatar>\n\n                            <ListItemText \n                                primary={`${story.authored_by.username}: ${story.text}`} \n                                secondary={<Moment date={story.time} format={'dddd h:mm a'} />}\n                            />\n                            \n                            <IconButton onClick={() => expandComment(story._id)}>\n                                <Icon>{storyIDs ? storyIDs[story._id] ? 'expand_less' : 'expand_more' : false}</Icon>\n                            </IconButton>\n\n                            <IconButton onClick={() => handleDelete(story._id)}>\n                                <Icon>delete_outline</Icon>\n                            </IconButton>\n\n                        </ListItem>\n\n                        <Collapse className={classes.collapse} in={storyIDs ? storyIDs[story._id] : false} timeout=\"auto\" unmountOnExit>\n                            \n                            <List disablePadding>\n                                {renderComments(story.comments)}\n                            </List>\n\n                            <div className={classes.form}>\n\n                                <TextField\n                                    name='123'\n                                    value={commentInput}\n                                    variant=\"outlined\"\n                                    label=\"Add a comment\"\n                                    onChange={handleCommentInput}\n                                />\n\n                                <IconButton onClick={() => handleCommentSubmit(story._id, story.authored_by.username)}>\n                                    <Icon>add_circle</Icon>\n                                </IconButton>\n\n                            </div>\n\n                        </Collapse>\n\n                    </Paper>\n                ))\n            );          \n        } else { return <CircularProgress size={100} color=\"secondary\" thickness={2.6} style={{display: 'block', margin: '40px auto 0px auto'}}  /> }\n    };\n\n    const renderComments = (comments) => {\n        let commentList = [];\n        if (comments.length < 5) { commentList = comments.slice(0, comments.length) }\n        else { commentList = comments.slice(0, 5) }\n        return (\n            commentList.map((comment, index) => {\n                return (  \n                    <Fragment key={comment.time}>\n\n                        <Divider />\n\n                        <ListItem key={index}>\n                            <ListItemText primary={`${comment.authored_by.username}: ${comment.text}`} secondary={<Moment date={comment.time} format={'dddd h:mm a'} />} />\n                        </ListItem>\n\n                    </Fragment>\n                );\n            })\n        );\n    };\n\n    const expandComment = (id) => {\n        const newCommentState = !storyIDs[id];\n        setStoryIDs({...storyIDs, [id]: newCommentState});\n    };\n\n    return (\n        <List className={classes.root}>\n            {renderTimeline()}\n        </List>\n    );\n};\n\nexport default Timeline;"]},"metadata":{},"sourceType":"module"}