{"ast":null,"code":"import _slicedToArray from \"/Users/God/Desktop/github/Port/react-portfolio/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/God/Desktop/github/Port/react-portfolio/client/src/components/Showcase/MtnDream/Editor/Tools/Font.js\";\nimport React, { Fragment, useState, useContext } from 'react';\nimport { Menu, MenuItem, Button, Icon, Fab } from '@material-ui/core';\nimport { EditorContext } from '../../../../../context/EditorContext';\nvar fontOptions = [{\n  font: 'arial'\n}, {\n  font: 'helvetica'\n}, {\n  font: 'Times New Roman'\n}, {\n  font: 'Time'\n}, {\n  font: 'Courier New'\n}, {\n  font: 'Courier'\n}, {\n  font: 'Verdana'\n}, {\n  font: 'Georgia'\n}, {\n  font: 'Palatino'\n}, {\n  font: 'Garamond'\n}, {\n  font: 'Bookman'\n}, {\n  font: 'Comic Sans MS'\n}, {\n  font: 'Trebuchet MS'\n}, {\n  font: 'Arial Black'\n}, {\n  font: 'Impact'\n}];\n\nvar Font = function Font() {\n  var holder = useContext(EditorContext);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      anchorEl = _useState2[0],\n      setAnchorEl = _useState2[1];\n\n  var handleOpen = function handleOpen(e) {\n    setAnchorEl(e.currentTarget);\n  };\n\n  var handleClose = function handleClose() {\n    setAnchorEl(null);\n  };\n\n  var wrapper = function wrapper(font) {\n    holder.handleFont(font);\n    handleClose();\n  };\n\n  var fontSwitch = function fontSwitch() {\n    switch (holder.sectionMode.el) {\n      case 'body':\n        return React.createElement(Button, {\n          style: {\n            marginRight: 10,\n            textTransform: 'capitalize',\n            fontFamily: \"\".concat(holder.body[holder.sectionMode.index].font, \", Helvetica, Arial, sans-serif\")\n          },\n          onClick: handleOpen,\n          variant: \"contained\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, holder.body[holder.sectionMode.index].font);\n\n      case 'title':\n        return React.createElement(Button, {\n          style: {\n            marginRight: 10,\n            textTransform: 'capitalize',\n            fontFamily: \"\".concat(holder[holder.sectionMode.el].font, \", Helvetica, Arial, sans-serif\")\n          },\n          onClick: handleOpen,\n          variant: \"contained\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }, holder[holder.sectionMode.el].font);\n\n      case 'description':\n        return React.createElement(Button, {\n          style: {\n            marginRight: 10,\n            textTransform: 'capitalize',\n            fontFamily: \"\".concat(holder[holder.sectionMode.el].font, \", Helvetica, Arial, sans-serif\")\n          },\n          onClick: handleOpen,\n          variant: \"contained\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }, holder[holder.sectionMode.el].font);\n\n      case 'readLength':\n        return React.createElement(Button, {\n          style: {\n            marginRight: 10,\n            textTransform: 'capitalize',\n            fontFamily: \"\".concat(holder[holder.sectionMode.el].font, \", Helvetica, Arial, sans-serif\")\n          },\n          onClick: handleOpen,\n          variant: \"contained\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, holder[holder.sectionMode.el].font);\n\n      default:\n        return React.createElement(Button, {\n          style: {\n            marginRight: 10\n          },\n          disabled: true,\n          variant: \"contained\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }, React.createElement(Icon, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }, \"lock\"));\n    }\n  };\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, fontSwitch(), React.createElement(Menu, {\n    id: \"textSize\",\n    anchorEl: anchorEl,\n    keepMounted: true,\n    open: Boolean(anchorEl),\n    onClose: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, fontOptions.map(function (item) {\n    return React.createElement(MenuItem, {\n      style: {\n        textTransform: 'capitalize',\n        fontFamily: \"\".concat(item.font, \", Helvetica, Arial, sans-serif\")\n      },\n      onClick: function onClick() {\n        return wrapper(item.font);\n      },\n      key: item.font,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, item.font);\n  })));\n};\n\nexport default Font;","map":{"version":3,"sources":["/Users/God/Desktop/github/Port/react-portfolio/client/src/components/Showcase/MtnDream/Editor/Tools/Font.js"],"names":["React","Fragment","useState","useContext","Menu","MenuItem","Button","Icon","Fab","EditorContext","fontOptions","font","Font","holder","anchorEl","setAnchorEl","handleOpen","e","currentTarget","handleClose","wrapper","handleFont","fontSwitch","sectionMode","el","marginRight","textTransform","fontFamily","body","index","Boolean","map","item"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useContext } from 'react';\n\nimport { Menu, MenuItem, Button, Icon, Fab } from '@material-ui/core';\n\nimport { EditorContext } from '../../../../../context/EditorContext';\n\nconst fontOptions = [\n    {\n        font: 'arial'\n    },\n    {\n        font: 'helvetica'\n    },\n    {\n        font: 'Times New Roman'\n    },\n    {\n        font: 'Time'\n    },\n    {\n        font: 'Courier New'\n    },\n    {\n        font: 'Courier'\n    },\n    {\n        font: 'Verdana'\n    },\n    {\n        font: 'Georgia'\n    },\n    {\n        font: 'Palatino'\n    },\n    {\n        font: 'Garamond'\n    },\n    {\n        font: 'Bookman'\n    },\n    {\n        font: 'Comic Sans MS'\n    },\n    {\n        font: 'Trebuchet MS'\n    },\n    {\n        font: 'Arial Black'\n    },\n    {\n        font: 'Impact'\n    }\n];\n\nconst Font = () => {\n\n    const holder = useContext(EditorContext);\n\n    const [anchorEl, setAnchorEl] = useState(null);\n\n    const handleOpen = (e) => {\n        setAnchorEl(e.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };  \n\n    const wrapper = font => {\n        holder.handleFont(font);\n        handleClose();\n    };\n\n    const fontSwitch = () => {\n        switch (holder.sectionMode.el) {\n            case 'body':\n                return <Button\n                            style={{\n                                marginRight: 10,\n                                textTransform: 'capitalize',\n                                fontFamily: `${holder.body[holder.sectionMode.index].font}, Helvetica, Arial, sans-serif`,\n                            }}\n                            onClick={handleOpen}\n                            variant=\"contained\"\n                        >\n                            {holder.body[holder.sectionMode.index].font}\n                        </Button>;\n            case 'title':\n                return <Button\n                            style={{\n                                marginRight: 10,\n                                textTransform: 'capitalize',\n                                fontFamily: `${holder[holder.sectionMode.el].font}, Helvetica, Arial, sans-serif`,\n                            }}\n                            onClick={handleOpen}\n                            variant=\"contained\"\n                        >\n                            {holder[holder.sectionMode.el].font}\n                        </Button>;\n            case 'description':\n                return <Button\n                            style={{\n                                marginRight: 10,\n                                textTransform: 'capitalize',\n                                fontFamily: `${holder[holder.sectionMode.el].font}, Helvetica, Arial, sans-serif`,\n                            }}\n                            onClick={handleOpen}\n                            variant=\"contained\"\n                        >\n                            {holder[holder.sectionMode.el].font}\n                        </Button>;\n            case 'readLength':\n                return <Button\n                            style={{\n                                marginRight: 10,\n                                textTransform: 'capitalize',\n                                fontFamily: `${holder[holder.sectionMode.el].font}, Helvetica, Arial, sans-serif`,\n                            }}\n                            onClick={handleOpen}\n                            variant=\"contained\"\n                        >\n                        {holder[holder.sectionMode.el].font}\n                    </Button>;\n            default:\n                return <Button style={{ marginRight: 10 }} disabled={true} variant=\"contained\">\n                            <Icon>lock</Icon>\n                        </Button>;\n        }\n    };\n\n    return (\n        <Fragment>\n            \n            {fontSwitch()}\n\n            <Menu\n                id=\"textSize\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                {\n                    fontOptions.map((item) => {\n                        return (\n                            <MenuItem\n                                style={{\n                                    textTransform: 'capitalize',\n                                    fontFamily: `${item.font}, Helvetica, Arial, sans-serif`,\n                                }}\n                                onClick={() => wrapper(item.font)}\n                                key={item.font}\n                            >\n                                {item.font}\n                            </MenuItem>\n                        );\n                    })\n                }\n            </Menu>\n\n        </Fragment>\n    );\n};\n\nexport default Font;\n"]},"metadata":{},"sourceType":"module"}