{"ast":null,"code":"import _toConsumableArray from \"/Users/God/Desktop/github/Port/portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/God/Desktop/github/Port/portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/God/Desktop/github/Port/portfolio/client/src/pages/Chat/Chat.js\";\nimport React, { Fragment, useEffect, useState } from 'react';\nimport { COMMUNITY_CHAT, MESSAGE_SENT, MESSAGE_RECIEVED, TYPING } from '../../socket/events';\nimport SideBar from './SideBar';\nimport ChatHeading from './chatHeading';\n\nfunction Chat(props) {\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      chat = _useState2[0],\n      setChat = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      activeChat = _useState4[0],\n      setActiveChat = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loaded = _useState6[0],\n      setLoaded = _useState6[1];\n\n  useEffect(function () {\n    if (!loaded) {\n      setLoaded(true);\n      var socket = props.socket;\n      socket.emit(COMMUNITY_CHAT, resetChat);\n    }\n  });\n\n  function resetChat(chat) {\n    return addChat(chat, true);\n  }\n\n  function addChat(chat, reset) {\n    var socket = props.socket;\n    var newChats = reset ? [chat] : [].concat(_toConsumableArray(chats), [chat]);\n    setChats({\n      chats: newChats\n    });\n    setActiveChat({\n      activeChat: reset ? chat : activeChat\n    });\n    var messageEvent = \"\".concat(MESSAGE_RECIEVED, \"=\").concat(chat.id);\n    var typingEvent = \"\".concat(TYPING, \"=\").concat(chat.id);\n    socket.on(typingEvent, updateTypingChat(chat.id));\n    socket.on(messageEvent, addMessageToChat(chat.id));\n  }\n\n  function addMessageToChat(chatId) {\n    return function (message) {\n      var newChats = chats.map(function (chat) {\n        if (chat.id === chatId) {\n          chat.messages.push(message);\n        }\n\n        return chat;\n      });\n      setChats({\n        chats: newChats\n      });\n    };\n  }\n\n  function updateTypingChat(chatId) {\n    return function (_ref) {\n      var isTyping = _ref.isTyping,\n          user = _ref.user;\n\n      if (user !== props.user.name) {\n        var newChats = chats.map(function (chat) {\n          if (chat.id === chatId) {\n            if (isTyping && !chat.typingUsers.includes(user)) {\n              chat.typingUsers.push(user);\n            } else if (!isTyping && chat.typingUser.includes(user)) {\n              chat.typingUsers = chat.typingUsers.filter(function (u) {\n                return u !== user;\n              });\n            }\n          }\n\n          return chat;\n        });\n        setChats({\n          chats: newChats\n        });\n      }\n    };\n  }\n\n  function sendTyping(chatId, messsage) {\n    var socket = props.socket;\n    socket.emit(MESSAGE_SENT, {\n      chatId: chatId,\n      message: message\n    });\n  }\n\n  function updateActiveChat(activeChat) {\n    setActiveChat(activeChat);\n  }\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(SideBar, {\n    logout: logout,\n    chats: chats,\n    user: user,\n    activeChat: activeChat,\n    setActiveChat: updateActiveChat,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"chat-room-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, activeChat !== null ? React.createElement(\"div\", {\n    className: \"chat-room\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(ChatHeading, {\n    name: activeChat.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }), React.createElement(Messages, {\n    messages: activeChat.messages,\n    user: user,\n    typingUsers: activeChat.typingUsers,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }), React.createElement(MessageInput, {\n    sendMessage: function sendMessage(message) {\n      _this.sendMessage(activeChat.id, message);\n    },\n    sendTyping: function sendTyping(isTyping) {\n      _this.sendTyping(activeChat.id, isTyping);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  })) : React.createElement(\"div\", {\n    className: \"chat-room choose\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"Choose a chat!\")))));\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/God/Desktop/github/Port/portfolio/client/src/pages/Chat/Chat.js"],"names":["React","Fragment","useEffect","useState","COMMUNITY_CHAT","MESSAGE_SENT","MESSAGE_RECIEVED","TYPING","SideBar","ChatHeading","Chat","props","chat","setChat","activeChat","setActiveChat","loaded","setLoaded","socket","emit","resetChat","addChat","reset","newChats","chats","setChats","messageEvent","id","typingEvent","on","updateTypingChat","addMessageToChat","chatId","message","map","messages","push","isTyping","user","name","typingUsers","includes","typingUser","filter","u","sendTyping","messsage","updateActiveChat","logout","sendMessage"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\n\nimport { COMMUNITY_CHAT, MESSAGE_SENT, MESSAGE_RECIEVED, TYPING } from '../../socket/events';\n\nimport SideBar from './SideBar';\nimport ChatHeading from './chatHeading';\n\nfunction Chat(props) {\n\n    const [chat, setChat] = useState([]);\n    const [activeChat, setActiveChat] = useState('');\n    const [loaded, setLoaded] = useState(false);\n\n    useEffect(() => {\n        if(!loaded) {\n            setLoaded(true);\n            const { socket } = props;\n            socket.emit(COMMUNITY_CHAT, resetChat);\n        }\n    })\n\n    function resetChat(chat) {\n        return addChat(chat, true);\n    }\n\n    function addChat(chat, reset) {\n        const { socket } = props;\n        const newChats = reset ? [chat] : [...chats, chat];\n        setChats({chats: newChats})\n        setActiveChat({activeChat:reset ? chat : activeChat});\n        const messageEvent = `${MESSAGE_RECIEVED}=${chat.id}`;\n        const typingEvent = `${TYPING}=${chat.id}`;\n        \n        socket.on(typingEvent, updateTypingChat(chat.id));\n        socket.on(messageEvent, addMessageToChat(chat.id));\n    } \n\n    function addMessageToChat(chatId) {\n        return message => {\n            let newChats = chats.map((chat) => {\n                if (chat.id === chatId) {\n                    chat.messages.push(message);\n                }\n                return chat;\n            });\n            setChats({chats: newChats});\n        };\n    }\n\n    function updateTypingChat(chatId) {\n        return ({isTyping, user}) => {\n            if(user !== props.user.name) {\n                let newChats = chats.map((chat) => {\n                    if(chat.id === chatId) {\n                        if(isTyping && !chat.typingUsers.includes(user)) {\n                            chat.typingUsers.push(user);\n                        } else if (!isTyping && chat.typingUser.includes(user)) {\n                            chat.typingUsers = chat.typingUsers.filter(u => u !== user)\n                        }\n                    }\n                    return chat;\n                })\n                setChats({chats: newChats});\n            }\n        }\n    }\n\n    function sendTyping(chatId, messsage) {\n        const { socket } = props;\n        socket.emit(MESSAGE_SENT, {chatId, message});\n    }\n\n    function updateActiveChat(activeChat) {\n        setActiveChat(activeChat);\n    }\n\n    return (\n        <Fragment>\n<div className=\"container\">\n\t\t\t\t<SideBar\n\t\t\t\t\tlogout={logout}\n\t\t\t\t\tchats={chats}\n\t\t\t\t\tuser={user}\n\t\t\t\t\tactiveChat={activeChat}\n\t\t\t\t\tsetActiveChat={updateActiveChat}\n\t\t\t\t\t/>\n\t\t\t\t<div className=\"chat-room-container\">\n\t\t\t\t\t{\n\t\t\t\t\t\tactiveChat !== null ? (\n\n\t\t\t\t\t\t\t<div className=\"chat-room\">\n\t\t\t\t\t\t\t\t<ChatHeading name={activeChat.name} />\n\t\t\t\t\t\t\t\t<Messages \n\t\t\t\t\t\t\t\t\tmessages={activeChat.messages}\n\t\t\t\t\t\t\t\t\tuser={user}\n\t\t\t\t\t\t\t\t\ttypingUsers={activeChat.typingUsers}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<MessageInput \n\t\t\t\t\t\t\t\t\tsendMessage={\n\t\t\t\t\t\t\t\t\t\t(message)=>{\n\t\t\t\t\t\t\t\t\t\t\tthis.sendMessage(activeChat.id, message)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tsendTyping={\n\t\t\t\t\t\t\t\t\t\t(isTyping)=>{\n\t\t\t\t\t\t\t\t\t\t\tthis.sendTyping(activeChat.id, isTyping)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t):\n\t\t\t\t\t\t<div className=\"chat-room choose\">\n\t\t\t\t\t\t\t<h3>Choose a chat!</h3>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\n\t\t\t</div>\n        </Fragment>\n    );\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}