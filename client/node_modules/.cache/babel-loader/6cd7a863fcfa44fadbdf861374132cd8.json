{"ast":null,"code":"import _toConsumableArray from \"/Users/God/Desktop/github/Port/portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/God/Desktop/github/Port/portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/God/Desktop/github/Port/portfolio/client/src/pages/Chat/Chat.js\";\nimport React, { Fragment, useEffect, useState, useContext, useRef } from 'react';\nimport { COMMUNITY_CHAT, MESSAGE_SENT, MESSAGE_RECIEVED, TYPING } from '../../socket/events';\nimport SideBar from '../../components/Social/Chat/SideBar';\nimport ChatHeading from '../../components/Social/Chat/chatHeading';\nimport Messages from '../../components/Social/Chat/messages/Messages';\nimport MessageInput from '../../components/Social/Chat/messages/MessageInput';\n\nfunction Chat(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      chats = _useState2[0],\n      setChats = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      activeChat = _useState4[0],\n      setActiveChat = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loaded = _useState6[0],\n      setLoaded = _useState6[1];\n\n  var auth = useContext(AuthContext);\n  useEffect(function () {\n    if (!loaded && auth.socket) {\n      setLoaded(true);\n      var socket = props.socket;\n      auth.socket.emit(COMMUNITY_CHAT, resetChat);\n    }\n  });\n\n  function resetChat(chat) {\n    return addChat(chat, true);\n  }\n\n  function addChat(chat, reset) {\n    var socket = props.socket;\n    var newChats = reset ? [chat] : [].concat(_toConsumableArray(chats), [chat]);\n    setChats({\n      chats: newChats\n    });\n    setActiveChat({\n      activeChat: reset ? chat : activeChat\n    });\n    var messageEvent = \"\".concat(MESSAGE_RECIEVED, \"=\").concat(chat.id);\n    var typingEvent = \"\".concat(TYPING, \"=\").concat(chat.id);\n    auth.socket.on(typingEvent, updateTypingChat(chat.id));\n    auth.socket.on(messageEvent, addMessageToChat(chat.id));\n  }\n\n  function addMessageToChat(chatId) {\n    return function (message) {\n      var newChats = chats.map(function (chat) {\n        if (chat.id === chatId) {\n          chat.messages.push(message);\n        }\n\n        return chat;\n      });\n      setChats({\n        chats: newChats\n      });\n    };\n  }\n\n  function updateTypingChat(chatId) {\n    return function (_ref) {\n      var isTyping = _ref.isTyping,\n          user = _ref.user;\n\n      if (user !== props.user.name) {\n        var newChats = chats.map(function (chat) {\n          if (chat.id === chatId) {\n            if (isTyping && !chat.typingUsers.includes(user)) {\n              chat.typingUsers.push(user);\n            } else if (!isTyping && chat.typingUser.includes(user)) {\n              chat.typingUsers = chat.typingUsers.filter(function (u) {\n                return u !== user;\n              });\n            }\n          }\n\n          return chat;\n        });\n        setChats({\n          chats: newChats\n        });\n      }\n    };\n  }\n\n  function sendTyping(chatId, message) {\n    var socket = props.socket;\n    socket.emit(MESSAGE_SENT, {\n      chatId: chatId,\n      message: message\n    });\n  }\n\n  function updateActiveChat(activeChat) {\n    setActiveChat(activeChat);\n  }\n\n  function renderChat() {\n    var _this = this;\n\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(SideBar, {\n      chats: chats,\n      activeChat: activeChat,\n      setActiveChat: updateActiveChat,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"chat-room-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, activeChat !== null ? React.createElement(\"div\", {\n      className: \"chat-room\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(ChatHeading, {\n      name: activeChat.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), React.createElement(Messages, {\n      messages: activeChat.messages,\n      typingUsers: activeChat.typingUsers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(MessageInput, {\n      sendMessage: function sendMessage(message) {\n        _this.sendMessage(activeChat.id, message);\n      },\n      sendTyping: function sendTyping(isTyping) {\n        _this.sendTyping(activeChat.id, isTyping);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      className: \"chat-room choose\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Choose a chat!\")))));\n  }\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, renderChat());\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/God/Desktop/github/Port/portfolio/client/src/pages/Chat/Chat.js"],"names":["React","Fragment","useEffect","useState","useContext","useRef","COMMUNITY_CHAT","MESSAGE_SENT","MESSAGE_RECIEVED","TYPING","SideBar","ChatHeading","Messages","MessageInput","Chat","props","chats","setChats","activeChat","setActiveChat","loaded","setLoaded","auth","AuthContext","socket","emit","resetChat","chat","addChat","reset","newChats","messageEvent","id","typingEvent","on","updateTypingChat","addMessageToChat","chatId","message","map","messages","push","isTyping","user","name","typingUsers","includes","typingUser","filter","u","sendTyping","updateActiveChat","renderChat","sendMessage"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState, useContext, useRef } from 'react';\n\nimport { COMMUNITY_CHAT, MESSAGE_SENT, MESSAGE_RECIEVED, TYPING } from '../../socket/events';\n\nimport SideBar from '../../components/Social/Chat/SideBar';\nimport ChatHeading from '../../components/Social/Chat/chatHeading';\nimport Messages from '../../components/Social/Chat/messages/Messages';\nimport MessageInput from '../../components/Social/Chat/messages/MessageInput';\n\nfunction Chat(props) {\n\n    const [chats, setChats] = useState([]);\n    const [activeChat, setActiveChat] = useState('');\n    const [loaded, setLoaded] = useState(false);\n\n    const auth = useContext(AuthContext);\n\n    useEffect(() => {\n        if(!loaded && auth.socket) {\n            setLoaded(true);\n            const { socket } = props;\n            auth.socket.emit(COMMUNITY_CHAT, resetChat);\n        }\n    })\n\n    function resetChat(chat) {\n        return addChat(chat, true);\n    }\n\n    function addChat(chat, reset) {\n        const { socket } = props;\n        const newChats = reset ? [chat] : [...chats, chat];\n        setChats({chats: newChats})\n        setActiveChat({activeChat:reset ? chat : activeChat});\n        const messageEvent = `${MESSAGE_RECIEVED}=${chat.id}`;\n        const typingEvent = `${TYPING}=${chat.id}`;\n        \n        auth.socket.on(typingEvent, updateTypingChat(chat.id));\n        auth.socket.on(messageEvent, addMessageToChat(chat.id));\n    } \n\n    function addMessageToChat(chatId) {\n        return message => {\n            let newChats = chats.map((chat) => {\n                if (chat.id === chatId) {\n                    chat.messages.push(message);\n                }\n                return chat;\n            });\n            setChats({chats: newChats});\n        };\n    }\n\n    function updateTypingChat(chatId) {\n        return ({isTyping, user}) => {\n            if(user !== props.user.name) {\n                let newChats = chats.map((chat) => {\n                    if(chat.id === chatId) {\n                        if(isTyping && !chat.typingUsers.includes(user)) {\n                            chat.typingUsers.push(user);\n                        } else if (!isTyping && chat.typingUser.includes(user)) {\n                            chat.typingUsers = chat.typingUsers.filter(u => u !== user)\n                        }\n                    }\n                    return chat;\n                })\n                setChats({chats: newChats});\n            }\n        }\n    }\n\n    function sendTyping(chatId, message) {\n        const { socket } = props;\n        socket.emit(MESSAGE_SENT, {chatId, message});\n    }\n\n    function updateActiveChat(activeChat) {\n        setActiveChat(activeChat);\n    }\n\n    function renderChat() {\n        return (\n            <Fragment>\n                <div className=\"container\">\n                    <SideBar\n                        chats={chats}\n                        activeChat={activeChat}\n                        setActiveChat={updateActiveChat}\n                        />\n                    <div className=\"chat-room-container\">\n                        {\n                            activeChat !== null ? (\n\n                                <div className=\"chat-room\">\n                                    <ChatHeading name={activeChat.name} />\n                                    <Messages \n                                        messages={activeChat.messages}\n                                        typingUsers={activeChat.typingUsers}\n                                    />\n                                    <MessageInput \n                                        sendMessage={\n                                            (message)=>{\n                                                this.sendMessage(activeChat.id, message)\n                                            }\n                                        }\n                                        sendTyping={\n                                            (isTyping)=>{\n                                                this.sendTyping(activeChat.id, isTyping)\n                                            }\n                                        }\n                                    />\n\n                                </div>\n                            ):\n                            <div className=\"chat-room choose\">\n                                <h3>Choose a chat!</h3>\n                            </div>\n                        }\n                    </div>\n\n                </div>\n        \n            </Fragment>\n        )\n    }\n\n    return (\n        <Fragment>\n            {renderChat()}\n        </Fragment>\n    )\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}