{"ast":null,"code":"import _toConsumableArray from \"/Users/God/Desktop/github/Port/react-portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/God/Desktop/github/Port/react-portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/God/Desktop/github/Port/react-portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/God/Desktop/github/Port/react-portfolio/client/src/components/Social/ProfileShell/Friends.js\";\nimport React, { Fragment, useEffect, useState } from 'react';\nimport { isWidthUp, isWidthDown } from '@material-ui/core/withWidth';\nimport { useTheme } from '@material-ui/core/styles';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useMediaQuery, Grid, GridList, GridListTile, GridListTileBar, ListSubheader, IconButton, Icon, Typography, Avatar } from '@material-ui/core';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'center',\n      // overflow: 'hidden',\n      backgroundColor: theme.palette.background.paper\n    },\n    listContainer: {},\n    gridList: {\n      width: '100%',\n      // height: 450,\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'center',\n      overflow: 'hidden',\n      // backgroundColor: theme.palette.background.paper,\n      margin: '0px auto 40px auto !important'\n    },\n    subheader: {\n      textAlign: 'center',\n      margin: '20px 0px'\n    },\n    tile: _defineProperty({}, theme.breakpoints.down('xs'), {\n      width: 400\n    }),\n    icon: {\n      color: 'rgba(255, 255, 255, 0.54)'\n    },\n    avatar: {\n      width: 60,\n      height: 60,\n      margin: '0px 20px 0px 10px'\n    }\n  };\n});\n\nfunction Friends(props) {\n  var classes = useStyles();\n  var theme = useTheme();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loaded = _useState2[0],\n      setLoaded = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      friendList = _useState4[0],\n      setFriendList = _useState4[1];\n\n  useEffect(function () {\n    if (!loaded && props.user) {\n      console.log(props.user);\n      fetch('/api/social/getFriends', {\n        method: 'POST',\n        body: JSON.stringify({\n          id: props.user._id\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(function (res) {\n        return res.json();\n      }).then(function (result) {\n        console.log(result);\n        setFriendList(_toConsumableArray(result));\n        setLoaded(true);\n      });\n    }\n\n    ;\n  });\n\n  function getCols() {\n    if (useMediaQuery(theme.breakpoints.down('md'))) {\n      return 0.7;\n    }\n\n    if (isWidthUp('sm', props.width)) {\n      return 0.8;\n    }\n\n    if (isWidthDown('sm', props.width)) {\n      return 1;\n    }\n  }\n\n  var getHeight = function getHeight() {\n    if (useMediaQuery(theme.breakpoints.down('md'))) {\n      return 220;\n    }\n\n    if (useMediaQuery(theme.breakpoints.down('xs'))) {\n      return 80;\n    }\n\n    if (isWidthDown('sm', props.width)) {\n      return 80;\n    }\n\n    if (isWidthDown('xs', props.width)) {\n      return 80;\n    }\n\n    if (isWidthUp('xs', props.width)) {\n      return 80;\n    }\n  };\n\n  function renderFriends() {\n    if (friendList.length > 1) {\n      return friendList.map(function (friend, index) {\n        return React.createElement(GridListTile, {\n          cols: getCols(),\n          className: classes.tile,\n          key: friend._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: friend.info.skyline,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }), React.createElement(GridListTileBar, {\n          title: friend.username,\n          actionIcon: React.createElement(Avatar, {\n            src: friend.info.avatar,\n            className: classes.avatar,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 113\n            },\n            __self: this\n          }),\n          actionPosition: \"left\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }));\n      });\n    } else {\n      return React.createElement(GridListTile, {\n        cols: 1,\n        className: classes.tile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"h4\",\n        align: \"center\",\n        color: \"textSecondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"Sorry, no friends to show \", \"\\xAF|_(\\u30C4)_/\\xAF\"));\n    }\n  }\n\n  return React.createElement(Grid, {\n    className: classes.listContainer,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(GridList, {\n    cellHeight: getHeight(),\n    spacing: 18,\n    col: 2.5,\n    className: classes.gridList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(GridListTile, {\n    key: \"Subheader\",\n    cols: 2,\n    style: {\n      height: 'auto'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(ListSubheader, {\n    component: \"div\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h3\",\n    color: \"textSecondary\",\n    className: classes.subheader,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, \"Friends\"))), renderFriends()));\n}\n\nexport default Friends;","map":{"version":3,"sources":["/Users/God/Desktop/github/Port/react-portfolio/client/src/components/Social/ProfileShell/Friends.js"],"names":["React","Fragment","useEffect","useState","isWidthUp","isWidthDown","useTheme","makeStyles","useMediaQuery","Grid","GridList","GridListTile","GridListTileBar","ListSubheader","IconButton","Icon","Typography","Avatar","useStyles","theme","root","display","flexWrap","justifyContent","backgroundColor","palette","background","paper","listContainer","gridList","width","overflow","margin","subheader","textAlign","tile","breakpoints","down","icon","color","avatar","height","Friends","props","classes","loaded","setLoaded","friendList","setFriendList","user","console","log","fetch","method","body","JSON","stringify","id","_id","headers","then","res","json","result","getCols","getHeight","renderFriends","length","map","friend","index","info","skyline","username"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\n\nimport { isWidthUp, isWidthDown } from '@material-ui/core/withWidth';\nimport { useTheme } from '@material-ui/core/styles';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useMediaQuery, Grid, GridList, GridListTile, GridListTileBar, ListSubheader, IconButton, Icon, Typography, Avatar } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'center',\n        // overflow: 'hidden',\n        backgroundColor: theme.palette.background.paper,\n    },\n    listContainer: {\n\n    },\n    gridList: {\n        width: '100%',\n        // height: 450,\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'center',\n        overflow: 'hidden',\n        // backgroundColor: theme.palette.background.paper,\n        margin: '0px auto 40px auto !important',\n    },\n    subheader: {\n        textAlign: 'center',\n        margin: '20px 0px',\n    },\n    tile: {\n        [theme.breakpoints.down('xs')]: {\n            width: 400,\n        },\n    },\n    icon: {\n        color: 'rgba(255, 255, 255, 0.54)',\n    },\n    avatar: {\n        width: 60,\n        height: 60,\n        margin: '0px 20px 0px 10px',\n    }\n}));\n\nfunction Friends(props) {\n\n    const classes = useStyles();\n    const theme = useTheme();\n\n    const [loaded, setLoaded] = useState(false);\n    const [friendList, setFriendList] = useState([])\n\n    useEffect(() => {\n        if((!loaded) && (props.user)) {\n            console.log(props.user)\n            fetch('/api/social/getFriends', {\n                method: 'POST',\n                body: JSON.stringify({id: props.user._id}),\n                headers: {'Content-Type': 'application/json'}\n            }).then(res => res.json())\n            .then((result) => {\n                console.log(result)\n                setFriendList([...result])\n                setLoaded(true);\n            });\n        };\n    })\n\n    function getCols() {\n        if(useMediaQuery(theme.breakpoints.down('md'))) {\n            return 0.7\n        }\n        if(isWidthUp('sm', props.width)) {\n            return 0.8\n        }\n        if(isWidthDown('sm', props.width)) {\n            return 1\n        }\n    }\n    \n    const getHeight = () => {\n        if(useMediaQuery(theme.breakpoints.down('md'))) {\n            return 220\n        }\n        if(useMediaQuery(theme.breakpoints.down('xs'))) {\n            return 80\n        }\n        if(isWidthDown('sm', props.width)) {\n            return 80\n        }\n        if(isWidthDown('xs', props.width)) {\n            return 80\n        }\n        if(isWidthUp('xs', props.width)) {\n            return 80\n        }\n    }\n\n    function renderFriends() {\n        \n        if(friendList.length > 1) {\n            return (\n                friendList.map((friend, index) => {\n                    return (\n                        <GridListTile cols={getCols()} className={classes.tile} key={friend._id} >\n                            <img src={friend.info.skyline} />\n                            <GridListTileBar \n                                title={friend.username}\n                                actionIcon={\n                                    <Avatar src={friend.info.avatar} className={classes.avatar} />  \n                                }\n                                actionPosition=\"left\"\n                            />\n                        </GridListTile>\n                    )\n                })  \n            );\n        } else {\n            return (\n                <GridListTile cols={1} className={classes.tile} >\n                    <Typography variant=\"h4\" align=\"center\" color=\"textSecondary\" >\n                        Sorry, no friends to show {`¯|_(ツ)_/¯`}\n                    </Typography>\n                </GridListTile>\n            );\n        }\n    }\n\n    return (\n        <Grid className={classes.listContainer} xs={12}>\n            <GridList cellHeight={getHeight()} spacing={18} col={2.5} className={classes.gridList}>\n                <GridListTile key=\"Subheader\" cols={2} style={{height: 'auto'}}>\n                    <ListSubheader component=\"div\">\n                        <Typography variant=\"h3\" color=\"textSecondary\" className={classes.subheader}>Friends</Typography>\n                    </ListSubheader>\n                </GridListTile>\n                {renderFriends()}\n            </GridList>\n        </Grid>\n    );\n}\n\nexport default (Friends);"]},"metadata":{},"sourceType":"module"}