{"ast":null,"code":"import _slicedToArray from \"/Users/God/Desktop/github/Port/react-portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/God/Desktop/github/Port/react-portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/God/Desktop/github/Port/react-portfolio/client/src/components/Weather/Weather.js\";\nimport React, { useEffect, useState, Fragment } from 'react';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { Divider, useMediaQuery, Grid, GridList, GridListTile, Typography, Paper } from '@material-ui/core';\nimport Search from './Search';\nimport WeatherModule from './WeatherModule';\nimport Description from './Description';\nimport weatherBG from './imgs/1x/weatherBGNew.png';\nimport 'typeface-roboto';\nvar useStyles = makeStyles(function (theme) {\n  var _weatherSection, _concept;\n\n  return {\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'space-around',\n      overflow: 'hidden',\n      width: '100%',\n      marginTop: 100\n    },\n    gridList: {\n      flexWrap: 'nowrap',\n      transform: 'translateZ(0)'\n    },\n    weatherSection: (_weatherSection = {}, _defineProperty(_weatherSection, theme.breakpoints.up('md'), {\n      height: '180vh'\n    }), _defineProperty(_weatherSection, theme.breakpoints.up('sm'), {\n      height: '170vh'\n    }), _defineProperty(_weatherSection, theme.breakpoints.down('sm'), {\n      height: '185vh'\n    }), _defineProperty(_weatherSection, theme.breakpoints.down('xs'), {\n      height: '180vh'\n    }), _defineProperty(_weatherSection, \"backgroundImage\", \"url(\".concat(weatherBG, \")\")), _defineProperty(_weatherSection, \"backgroundSize\", 'cover'), _defineProperty(_weatherSection, \"height\", '160vh'), _weatherSection),\n    concept: (_concept = {}, _defineProperty(_concept, theme.breakpoints.up('md'), {\n      fontSize: '5rem',\n      marginLeft: '180px'\n    }), _defineProperty(_concept, theme.breakpoints.down('sm'), {\n      fontSize: '3.4rem',\n      marginLeft: '180px'\n    }), _defineProperty(_concept, theme.breakpoints.down('xs'), {\n      fontSize: '2rem',\n      marginLeft: '120px'\n    }), _defineProperty(_concept, \"marginTop\", '30px'), _defineProperty(_concept, \"marginLeft\", '80px'), _concept)\n  };\n});\n\nfunction Weather(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      weather = _useState2[0],\n      setWeather = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoaded = _useState4[0],\n      setIsLoaded = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      sentRequest = _useState6[0],\n      setSentRequest = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      parsedForecast = _useState8[0],\n      setParsedForecast = _useState8[1];\n\n  var classes = useStyles();\n  var theme = useTheme();\n  var lg = useMediaQuery(theme.breakpoints.up('md'));\n  var md = useMediaQuery(theme.breakpoints.down('md'));\n  var sm = useMediaQuery(theme.breakpoints.down('sm'));\n  var xs = useMediaQuery(theme.breakpoints.down('xs'));\n\n  function getHeight() {\n    if (xs) {\n      return 200;\n    }\n\n    ;\n\n    if (sm) {\n      return 250;\n    }\n\n    ;\n\n    if (md) {\n      return 300;\n    }\n\n    ;\n\n    if (lg) {\n      return 300;\n    }\n  }\n\n  ;\n\n  function getListCols() {\n    if (xs) {\n      return 1.8;\n    }\n\n    ;\n\n    if (sm) {\n      return 2.2;\n    }\n\n    ;\n\n    if (md) {\n      return 2.8;\n    }\n\n    ;\n\n    if (lg) {\n      return 2.8;\n    }\n\n    ;\n  }\n\n  function getTileRows() {\n    if (xs) {\n      return 1.5;\n    }\n\n    ;\n\n    if (sm) {\n      return 1.2;\n    }\n\n    ;\n\n    if (md) {\n      return 1;\n    }\n\n    ;\n\n    if (lg) {\n      return 1;\n    }\n\n    ;\n  }\n\n  useEffect(function () {\n    if (!sentRequest) {\n      setSentRequest(true);\n      setParsedForecast('');\n      fetch('https://api.openweathermap.org/data/2.5/forecast?lat=35.227085&lon=-80.843124&units=imperial&APPID=4216d1350fe31af9bf5100bb34fa72e2').then(function (res) {\n        return res.json();\n      }).then(function (result) {\n        setWeather(result);\n        setIsLoaded(true);\n      });\n    }\n  });\n\n  if (isLoaded) {\n    var dt = '';\n    var filteredResult = weather.list.filter(function (object) {\n      if (dt === '') {\n        dt = object.dt_txt.split(' ');\n        dt = dt[0];\n        return true;\n      }\n\n      var sample = object.dt_txt.split(' ');\n\n      if (dt !== sample[0]) {\n        dt = sample[0];\n        return true;\n      }\n    });\n    setParsedForecast(filteredResult);\n    setIsLoaded(false);\n    props.grabWeather(filteredResult[0]);\n  }\n\n  var weatherInfo = [];\n\n  if (parsedForecast) {\n    console.log('PARSED FORECAST');\n    weatherInfo = parsedForecast.map(function (object, index) {\n      return React.createElement(GridListTile, {\n        rows: getTileRows(),\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(WeatherModule, {\n        weather: object.weather[0].description,\n        image: object.weather[0].icon,\n        temp_max: Math.round(object.main.temp_max),\n        temp_min: Math.round(object.main.temp_min),\n        city: weather.city.name,\n        country: weather.city.country,\n        date: object.dt_txt,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }));\n    });\n  }\n\n  function updateModule(coords) {\n    setParsedForecast('');\n    console.log(coords);\n    fetch(\"https://api.openweathermap.org/data/2.5/forecast?lat=\".concat(coords[0].coord.lat, \"&lon=\").concat(coords[0].coord.lon, \"&units=imperial&APPID=4216d1350fe31af9bf5100bb34fa72e2\")).then(function (res) {\n      return res.json();\n    }).then(function (result) {\n      console.log(result);\n      setWeather(result);\n      setIsLoaded(true);\n    });\n  }\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.weatherSection,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.concept,\n    align: \"center\",\n    color: \"primary\",\n    variant: \"h2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, \"Weather Concept\")), React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, React.createElement(GridList, {\n    cellHeight: getHeight(),\n    className: classes.gridList,\n    cols: getListCols(),\n    spacing: 8,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, weatherInfo))), React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    md: 6,\n    sm: 12,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, React.createElement(Search, {\n    updateModule: updateModule,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }))), React.createElement(Grid, {\n    justify: \"center\",\n    item: true,\n    md: 6,\n    sm: 12,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, React.createElement(Description, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  })))));\n}\n\nexport default Weather;","map":{"version":3,"sources":["/Users/God/Desktop/github/Port/react-portfolio/client/src/components/Weather/Weather.js"],"names":["React","useEffect","useState","Fragment","makeStyles","useTheme","Divider","useMediaQuery","Grid","GridList","GridListTile","Typography","Paper","Search","WeatherModule","Description","weatherBG","useStyles","theme","root","display","flexWrap","justifyContent","overflow","width","marginTop","gridList","transform","weatherSection","breakpoints","up","height","down","concept","fontSize","marginLeft","Weather","props","weather","setWeather","isLoaded","setIsLoaded","sentRequest","setSentRequest","parsedForecast","setParsedForecast","classes","lg","md","sm","xs","getHeight","getListCols","getTileRows","fetch","then","res","json","result","dt","filteredResult","list","filter","object","dt_txt","split","sample","grabWeather","weatherInfo","console","log","map","index","description","icon","Math","round","main","temp_max","temp_min","city","name","country","updateModule","coords","coord","lat","lon"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, Fragment } from 'react';\n\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { Divider, useMediaQuery, Grid, GridList, GridListTile, Typography, Paper } from '@material-ui/core';\n\nimport Search from './Search';\nimport WeatherModule from './WeatherModule';\nimport Description from './Description';\n\nimport weatherBG from './imgs/1x/weatherBGNew.png'\n\nimport 'typeface-roboto';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'space-around',\n      overflow: 'hidden',\n      width: '100%',\n      marginTop: 100\n    },\n    gridList: {\n      flexWrap: 'nowrap',\n      transform: 'translateZ(0)',\n    },\n    weatherSection: {\n        [theme.breakpoints.up('md')]: {\n            height: '180vh',\n        },\n        [theme.breakpoints.up('sm')]: {\n            height: '170vh',\n        },\n        [theme.breakpoints.down('sm')]: {\n            height: '185vh',\n        },\n        [theme.breakpoints.down('xs')]: {\n            height: '180vh',\n        },\n        backgroundImage: `url(${weatherBG})`,\n        backgroundSize: 'cover',\n        height: '160vh',\n    },\n    concept: {\n        [theme.breakpoints.up('md')]: {\n            fontSize: '5rem',\n            marginLeft: '180px',\n        },\n        [theme.breakpoints.down('sm')]: {\n            fontSize: '3.4rem',\n            marginLeft: '180px',\n        },\n        [theme.breakpoints.down('xs')]: {\n            fontSize: '2rem',\n            marginLeft: '120px',\n        },\n        marginTop: '30px',\n        marginLeft: '80px',\n    },\n  }));\n  \n\nfunction Weather(props) {\n\n    const [weather, setWeather] = useState('');\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [sentRequest, setSentRequest] = useState(false);\n    const [parsedForecast, setParsedForecast] = useState(null);\n\n    const classes = useStyles();\n    const theme = useTheme();\n\n    const lg = useMediaQuery(theme.breakpoints.up('md'));\n    const md = useMediaQuery(theme.breakpoints.down('md'));\n    const sm = useMediaQuery(theme.breakpoints.down('sm'));\n    const xs = useMediaQuery(theme.breakpoints.down('xs'));\n\n    function getHeight() {\n        if(xs){return 200};\n        if(sm){return 250};\n        if(md){return 300};\n        if(lg){return 300}\n    };\n\n    function getListCols() {\n        if(xs){return 1.8};\n        if(sm){return 2.2};\n        if(md){return 2.8};\n        if(lg){return 2.8};\n    }\n\n    function getTileRows() {\n        if(xs){return 1.5};\n        if(sm){return 1.2};\n        if(md){return 1};\n        if(lg){return 1};\n    }\n\n    useEffect(() => {\n        if (!sentRequest) {\n            setSentRequest(true)\n            setParsedForecast('')\n            fetch('https://api.openweathermap.org/data/2.5/forecast?lat=35.227085&lon=-80.843124&units=imperial&APPID=4216d1350fe31af9bf5100bb34fa72e2')\n            .then(res => res.json())\n            .then((result) => { \n                setWeather(result);\n                setIsLoaded(true);\n            });\n        }\n    })\n\n    if (isLoaded) {\n        var dt = '';\n        const filteredResult = weather.list.filter(object => {\n            if(dt === '') {dt = object.dt_txt.split(' '); dt = dt[0]; return true}\n            const sample = object.dt_txt.split(' ')\n            if (dt !== sample[0]) {dt = sample[0]; return true}\n        })\n        setParsedForecast(filteredResult);\n        setIsLoaded(false);\n        props.grabWeather(filteredResult[0]);\n    }\n\n    var weatherInfo = [];\n\n    if (parsedForecast) {\n        console.log('PARSED FORECAST')\n        weatherInfo = parsedForecast.map((object, index) => {\n            return (\n            <GridListTile rows={getTileRows()} key={index} >\n                <WeatherModule \n                    weather={object.weather[0].description}\n                    image={object.weather[0].icon}\n                    temp_max={Math.round(object.main.temp_max)}\n                    temp_min={Math.round(object.main.temp_min)}\n                    city={weather.city.name}\n                    country={weather.city.country}\n                    date={object.dt_txt}\n                />\n            </GridListTile>\n            )\n        })\n    } \n\n    function updateModule(coords) {\n        setParsedForecast('');\n        console.log(coords)\n        fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${coords[0].coord.lat}&lon=${coords[0].coord.lon}&units=imperial&APPID=4216d1350fe31af9bf5100bb34fa72e2`)\n        .then(res => res.json())\n        .then((result) => {console.log(result); setWeather(result); setIsLoaded(true); });\n    }\n\n\n    return (\n        <Fragment>\n            <div className={classes.weatherSection}>\n\n                    <Grid item xs={12}>\n\n                        <Typography className={classes.concept} align=\"center\" color=\"primary\" variant=\"h2\">\n                            Weather Concept\n                        </Typography>\n\n                    </Grid>\n\n                    <Grid item xs={12}>\n\n                        <div className={classes.root}>\n                            \n                            <GridList cellHeight={getHeight()} className={classes.gridList} cols={getListCols()} spacing={8}>\n                                {weatherInfo}\n                            </GridList>\n\n                        </div>\n\n                    </Grid>\n\n                    <Grid container>\n\n                        <Grid item md={6} sm={12} xs={12}>\n                                <div >\n                                    <Search updateModule={updateModule} />\n                                </div>\n                        </Grid>\n\n                        <Grid justify=\"center\" item md={6} sm={12} xs={12}>\n\n                            <Description />\n\n                        </Grid>\n\n                    </Grid>\n            </div>\n        </Fragment>\n    );\n}\n \nexport default Weather;"]},"metadata":{},"sourceType":"module"}