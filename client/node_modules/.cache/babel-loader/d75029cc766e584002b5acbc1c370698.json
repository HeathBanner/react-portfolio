{"ast":null,"code":"import _slicedToArray from \"/Users/God/Desktop/github/Port/portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/God/Desktop/github/Port/portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/God/Desktop/github/Port/portfolio/client/src/components/Weather/Weather.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Parallax } from 'react-parallax';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { GridList, GridListTile, Typography, Paper } from '@material-ui/core';\nimport Search from './Search';\nimport WeatherModule from './WeatherModule';\nimport 'typeface-roboto';\nvar useStyles = makeStyles(function (theme) {\n  var _concept;\n\n  return {\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'space-around',\n      height: '300px',\n      overflow: 'hidden',\n      width: '100%'\n    },\n    gridList: {\n      flexWrap: 'nowrap',\n      transform: 'translateZ(0)'\n    },\n    weatherInfo: {\n      width: '70%',\n      margin: '50px auto',\n      padding: '20px 40px' // fontSize: '17px',\n\n    },\n    concept: (_concept = {}, _defineProperty(_concept, theme.breakpoints.up('md'), {\n      fontSize: '5rem'\n    }), _defineProperty(_concept, theme.breakpoints.down('sm'), {\n      fontSize: '3rem'\n    }), _defineProperty(_concept, theme.breakpoints.down('xs'), {\n      fontSize: '2rem'\n    }), _defineProperty(_concept, \"marginTop\", '30px'), _concept),\n    description: {\n      marginBottom: '20px'\n    }\n  };\n});\n\nfunction Weather(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      weather = _useState2[0],\n      setWeather = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      weatherToday = _useState4[0],\n      setWeatherToday = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoaded = _useState6[0],\n      setIsLoaded = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      sentRequest = _useState8[0],\n      setSentRequest = _useState8[1];\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      parsedForecast = _useState10[0],\n      setParsedForecast = _useState10[1];\n\n  var classes = useStyles();\n  useEffect(function () {\n    if (!sentRequest) {\n      setSentRequest(true);\n      fetch('http://api.openweathermap.org/data/2.5/forecast?lat=35.227085&lon=-80.843124&APPID=4216d1350fe31af9bf5100bb34fa72e2').then(function (res) {\n        return res.json();\n      }).then(function (result) {\n        var test = result.list[0].main.temp;\n        console.log(test * 9 / 5 - 459.67);\n        console.log(result);\n        setWeather(result);\n        setSentRequest(true);\n        setIsLoaded(true);\n      });\n    }\n  });\n\n  if (isLoaded) {\n    var dt = '';\n    var filteredResult = weather.list.filter(function (object) {\n      if (dt === '') {\n        dt = object.dt_txt.split(' ');\n        dt = dt[0];\n        return true;\n      }\n\n      var sample = object.dt_txt.split(' ');\n\n      if (dt !== sample[0]) {\n        dt = sample[0];\n        console.log(sample[0]);\n        return true;\n      }\n    });\n    setParsedForecast(filteredResult);\n    setIsLoaded(false);\n    setWeatherToday(filteredResult[0]);\n    props.grabWeather(filteredResult[0]);\n    console.log(filteredResult[0]);\n  }\n\n  var weatherInfo = [];\n\n  if (parsedForecast) {\n    console.log('PARSE');\n    weatherInfo = parsedForecast.map(function (object) {\n      return React.createElement(GridListTile, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(WeatherModule, {\n        weather: object.weather[0].description,\n        image: object.weather[0].icon,\n        temp_max: Math.round(object.main.temp_max * 9 / 5 - 459.67),\n        temp_min: Math.round(object.main.temp_min * 9 / 5 - 459.673),\n        city: weather.city.name,\n        country: weather.city.country,\n        date: object.dt_txt,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }));\n    });\n  }\n\n  function updateModule(coords) {\n    console.log(coords);\n    fetch(\"http://api.openweathermap.org/data/2.5/forecast?lat=\".concat(coords[0].coord.lat, \"&lon=\").concat(coords[0].coord.lon, \"&units=imperial&APPID=4216d1350fe31af9bf5100bb34fa72e2\")).then(function (res) {\n      return res.json();\n    }).then(function (result) {\n      console.log(result);\n      setWeather(result);\n      setIsLoaded(true);\n    });\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(Parallax, {\n    bgImage: require('./imgs/gabriele-diwald.png'),\n    bgImageAlt: \"Weather\",\n    strength: 400,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"weather-section\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.concept,\n    align: \"center\",\n    variant: \"h2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, \"Weather Concept\"), React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(GridList, {\n    cellHeight: 'auto',\n    className: classes.gridList,\n    cols: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, weatherInfo)))), React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-md-6 col-sm-6 col-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(Paper, {\n    className: classes.weatherInfo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.description,\n    align: \"center\",\n    variant: \"h3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, \"Description\"), React.createElement(Typography, {\n    variant: \"body1\",\n    align: \"center\",\n    className: classes.description,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, \"This concept uses Open Weather Map's 5 day forecast API to render the widgets above. It grabs the weather data from Charlotte, NC by default. The color or mood of the navigation bar at the top of the screen is based upon the weather of the currently selected city. If the user chooses to change the city, they may do so by selecting the State then City of their choice. It'll search a DB of cities from around the world provided by Open Weather Map. The list isn't specific so it's been narrowed down to a few cities per state within the US. I'm currently searching for a better Database with Coordinates as well as Cities/Provinces and States.\"))), React.createElement(\"div\", {\n    className: \"col-md-6 col-sm-6 col-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      width: '80%',\n      height: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(Search, {\n    updateModule: updateModule,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  })))))));\n}\n\nexport default Weather;","map":{"version":3,"sources":["/Users/God/Desktop/github/Port/portfolio/client/src/components/Weather/Weather.js"],"names":["React","useEffect","useState","Parallax","makeStyles","GridList","GridListTile","Typography","Paper","Search","WeatherModule","useStyles","theme","root","display","flexWrap","justifyContent","height","overflow","width","gridList","transform","weatherInfo","margin","padding","concept","breakpoints","up","fontSize","down","description","marginBottom","Weather","props","weather","setWeather","weatherToday","setWeatherToday","isLoaded","setIsLoaded","sentRequest","setSentRequest","parsedForecast","setParsedForecast","classes","fetch","then","res","json","result","test","list","main","temp","console","log","dt","filteredResult","filter","object","dt_txt","split","sample","grabWeather","map","icon","Math","round","temp_max","temp_min","city","name","country","updateModule","coords","coord","lat","lon","require","alignItems"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,UAAjC,EAA6CC,KAA7C,QAA0D,mBAA1D;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA,OAAO,iBAAP;AAEA,IAAMC,SAAS,GAAGP,UAAU,CAAC,UAAAQ,KAAK;AAAA;;AAAA,SAAK;AACnCC,IAAAA,IAAI,EAAE;AACJC,MAAAA,OAAO,EAAE,MADL;AAEJC,MAAAA,QAAQ,EAAE,MAFN;AAGJC,MAAAA,cAAc,EAAE,cAHZ;AAIJC,MAAAA,MAAM,EAAE,OAJJ;AAKJC,MAAAA,QAAQ,EAAE,QALN;AAMJC,MAAAA,KAAK,EAAE;AANH,KAD6B;AASnCC,IAAAA,QAAQ,EAAE;AACRL,MAAAA,QAAQ,EAAE,QADF;AAERM,MAAAA,SAAS,EAAE;AAFH,KATyB;AAanCC,IAAAA,WAAW,EAAE;AACTH,MAAAA,KAAK,EAAE,KADE;AAETI,MAAAA,MAAM,EAAE,WAFC;AAGTC,MAAAA,OAAO,EAAE,WAHA,CAIT;;AAJS,KAbsB;AAmBnCC,IAAAA,OAAO,4CACFb,KAAK,CAACc,WAAN,CAAkBC,EAAlB,CAAqB,IAArB,CADE,EAC2B;AAC1BC,MAAAA,QAAQ,EAAE;AADgB,KAD3B,6BAIFhB,KAAK,CAACc,WAAN,CAAkBG,IAAlB,CAAuB,IAAvB,CAJE,EAI6B;AAC5BD,MAAAA,QAAQ,EAAE;AADkB,KAJ7B,6BAOFhB,KAAK,CAACc,WAAN,CAAkBG,IAAlB,CAAuB,IAAvB,CAPE,EAO6B;AAC5BD,MAAAA,QAAQ,EAAE;AADkB,KAP7B,0CAUQ,MAVR,YAnB4B;AA+BnCE,IAAAA,WAAW,EAAE;AACTC,MAAAA,YAAY,EAAE;AADL;AA/BsB,GAAL;AAAA,CAAN,CAA5B;;AAqCA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAAA,kBAEU/B,QAAQ,CAAC,EAAD,CAFlB;AAAA;AAAA,MAEbgC,OAFa;AAAA,MAEJC,UAFI;;AAAA,mBAGoBjC,QAAQ,CAAC,EAAD,CAH5B;AAAA;AAAA,MAGbkC,YAHa;AAAA,MAGCC,eAHD;;AAAA,mBAIYnC,QAAQ,CAAC,KAAD,CAJpB;AAAA;AAAA,MAIboC,QAJa;AAAA,MAIHC,WAJG;;AAAA,mBAKkBrC,QAAQ,CAAC,KAAD,CAL1B;AAAA;AAAA,MAKbsC,WALa;AAAA,MAKAC,cALA;;AAAA,mBAMwBvC,QAAQ,CAAC,IAAD,CANhC;AAAA;AAAA,MAMbwC,cANa;AAAA,MAMGC,iBANH;;AAQpB,MAAMC,OAAO,GAAGjC,SAAS,EAAzB;AAGAV,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAI,CAACuC,WAAL,EAAkB;AACdC,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAI,MAAAA,KAAK,CAAC,qHAAD,CAAL,CACCC,IADD,CACM,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,OADT,EAECF,IAFD,CAEM,UAACG,MAAD,EAAY;AACd,YAAIC,IAAI,GAAGD,MAAM,CAACE,IAAP,CAAY,CAAZ,EAAeC,IAAf,CAAoBC,IAA/B;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYL,IAAI,GAAC,CAAL,GAAO,CAAP,GAAS,MAArB;AAEAI,QAAAA,OAAO,CAACC,GAAR,CAAYN,MAAZ;AAAqBd,QAAAA,UAAU,CAACc,MAAD,CAAV;AAAoBR,QAAAA,cAAc,CAAC,IAAD,CAAd;AAAsBF,QAAAA,WAAW,CAAC,IAAD,CAAX;AAAmB,OANtF;AAOH;AACJ,GAXQ,CAAT;;AAaA,MAAID,QAAJ,EAAc;AACV,QAAIkB,EAAE,GAAG,EAAT;AACA,QAAMC,cAAc,GAAGvB,OAAO,CAACiB,IAAR,CAAaO,MAAb,CAAoB,UAAAC,MAAM,EAAI;AACjD,UAAGH,EAAE,KAAK,EAAV,EAAc;AAACA,QAAAA,EAAE,GAAGG,MAAM,CAACC,MAAP,CAAcC,KAAd,CAAoB,GAApB,CAAL;AAA+BL,QAAAA,EAAE,GAAGA,EAAE,CAAC,CAAD,CAAP;AAAY,eAAO,IAAP;AAAY;;AACtE,UAAMM,MAAM,GAAGH,MAAM,CAACC,MAAP,CAAcC,KAAd,CAAoB,GAApB,CAAf;;AACA,UAAIL,EAAE,KAAKM,MAAM,CAAC,CAAD,CAAjB,EAAsB;AAACN,QAAAA,EAAE,GAAGM,MAAM,CAAC,CAAD,CAAX;AAAgBR,QAAAA,OAAO,CAACC,GAAR,CAAYO,MAAM,CAAC,CAAD,CAAlB;AAAwB,eAAO,IAAP;AAAY;AAC9E,KAJsB,CAAvB;AAKAnB,IAAAA,iBAAiB,CAACc,cAAD,CAAjB;AACAlB,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,IAAAA,eAAe,CAACoB,cAAc,CAAC,CAAD,CAAf,CAAf;AACAxB,IAAAA,KAAK,CAAC8B,WAAN,CAAkBN,cAAc,CAAC,CAAD,CAAhC;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYE,cAAc,CAAC,CAAD,CAA1B;AACH;;AAED,MAAInC,WAAW,GAAG,EAAlB;;AAEA,MAAIoB,cAAJ,EAAoB;AAChBY,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAjC,IAAAA,WAAW,GAAGoB,cAAc,CAACsB,GAAf,CAAmB,UAAAL,MAAM,EAAI;AACvC,aACA,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,aAAD;AACI,QAAA,OAAO,EAAEA,MAAM,CAACzB,OAAP,CAAe,CAAf,EAAkBJ,WAD/B;AAEI,QAAA,KAAK,EAAE6B,MAAM,CAACzB,OAAP,CAAe,CAAf,EAAkB+B,IAF7B;AAGI,QAAA,QAAQ,EAAEC,IAAI,CAACC,KAAL,CAAWR,MAAM,CAACP,IAAP,CAAYgB,QAAZ,GAAqB,CAArB,GAAuB,CAAvB,GAAyB,MAApC,CAHd;AAII,QAAA,QAAQ,EAAEF,IAAI,CAACC,KAAL,CAAWR,MAAM,CAACP,IAAP,CAAYiB,QAAZ,GAAqB,CAArB,GAAuB,CAAvB,GAAyB,OAApC,CAJd;AAKI,QAAA,IAAI,EAAEnC,OAAO,CAACoC,IAAR,CAAaC,IALvB;AAMI,QAAA,OAAO,EAAErC,OAAO,CAACoC,IAAR,CAAaE,OAN1B;AAOI,QAAA,IAAI,EAAEb,MAAM,CAACC,MAPjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADA;AAaH,KAda,CAAd;AAeH;;AAED,WAASa,YAAT,CAAsBC,MAAtB,EAA8B;AAC1BpB,IAAAA,OAAO,CAACC,GAAR,CAAYmB,MAAZ;AACA7B,IAAAA,KAAK,+DAAwD6B,MAAM,CAAC,CAAD,CAAN,CAAUC,KAAV,CAAgBC,GAAxE,kBAAmFF,MAAM,CAAC,CAAD,CAAN,CAAUC,KAAV,CAAgBE,GAAnG,4DAAL,CACC/B,IADD,CACM,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KADT,EAECF,IAFD,CAEM,UAACG,MAAD,EAAY;AAACK,MAAAA,OAAO,CAACC,GAAR,CAAYN,MAAZ;AAAqBd,MAAAA,UAAU,CAACc,MAAD,CAAV;AAAoBV,MAAAA,WAAW,CAAC,IAAD,CAAX;AAAmB,KAF/E;AAGH;;AAGD,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD;AACI,IAAA,OAAO,EAAEuC,OAAO,CAAC,4BAAD,CADpB;AAEI,IAAA,UAAU,EAAC,SAFf;AAGI,IAAA,QAAQ,EAAE,GAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAElC,OAAO,CAACnB,OAA/B;AAAwC,IAAA,KAAK,EAAC,QAA9C;AAAuD,IAAA,OAAO,EAAC,IAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADH,EAIA;AAAK,IAAA,SAAS,EAAEmB,OAAO,CAAC/B,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI,oBAAC,QAAD;AAAU,IAAA,UAAU,EAAE,MAAtB;AAA8B,IAAA,SAAS,EAAE+B,OAAO,CAACxB,QAAjD;AAA2D,IAAA,IAAI,EAAE,CAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKE,WADL,CAFJ,CAJA,CADJ,CADJ,EAcI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACQ,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAEsB,OAAO,CAACtB,WAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAEsB,OAAO,CAACd,WAA/B;AAA4C,IAAA,KAAK,EAAC,QAAlD;AAA2D,IAAA,OAAO,EAAC,IAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAII,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,OAApB;AAA4B,IAAA,KAAK,EAAC,QAAlC;AAA2C,IAAA,SAAS,EAAEc,OAAO,CAACd,WAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4oBAJJ,CADR,CADJ,EAiBI;AAAK,IAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,KAAK,EAAE;AAAChB,MAAAA,OAAO,EAAE,MAAV;AAAkBiE,MAAAA,UAAU,EAAE,QAA9B;AAAwC5D,MAAAA,KAAK,EAAE,KAA/C;AAAsDF,MAAAA,MAAM,EAAE;AAA9D,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AAAQ,IAAA,YAAY,EAAEwD,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,CAjBJ,CAdJ,CALJ,CADJ,CADJ;AAgDH;;AAED,eAAezC,OAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Parallax } from 'react-parallax';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { GridList, GridListTile, Typography, Paper } from '@material-ui/core';\n\nimport Search from './Search';\nimport WeatherModule from './WeatherModule';\n\nimport 'typeface-roboto';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'space-around',\n      height: '300px',\n      overflow: 'hidden',\n      width: '100%',\n    },\n    gridList: {\n      flexWrap: 'nowrap',\n      transform: 'translateZ(0)',\n    },\n    weatherInfo: {\n        width: '70%',\n        margin: '50px auto',\n        padding: '20px 40px',\n        // fontSize: '17px',\n    },\n    concept: {\n        [theme.breakpoints.up('md')]: {\n            fontSize: '5rem'\n        },\n        [theme.breakpoints.down('sm')]: {\n            fontSize: '3rem'\n        },\n        [theme.breakpoints.down('xs')]: {\n            fontSize: '2rem'\n        },\n        marginTop: '30px',\n    },\n    description: {\n        marginBottom: '20px',\n    }\n  }));\n  \n\nfunction Weather(props) {\n\n    const [weather, setWeather] = useState('');\n    const [weatherToday, setWeatherToday] = useState('');\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [sentRequest, setSentRequest] = useState(false);\n    const [parsedForecast, setParsedForecast] = useState(null);\n\n    const classes = useStyles();\n\n\n    useEffect(() => {\n        if (!sentRequest) {\n            setSentRequest(true)\n            fetch('http://api.openweathermap.org/data/2.5/forecast?lat=35.227085&lon=-80.843124&APPID=4216d1350fe31af9bf5100bb34fa72e2')\n            .then(res => res.json())\n            .then((result) => { \n                var test = result.list[0].main.temp\n                console.log(test*9/5-459.67)\n        \n                console.log(result); setWeather(result); setSentRequest(true); setIsLoaded(true);});\n        }\n    })\n\n    if (isLoaded) {\n        var dt = '';\n        const filteredResult = weather.list.filter(object => {\n            if(dt === '') {dt = object.dt_txt.split(' '); dt = dt[0]; return true}\n            const sample = object.dt_txt.split(' ')\n            if (dt !== sample[0]) {dt = sample[0]; console.log(sample[0]); return true}\n        })\n        setParsedForecast(filteredResult);\n        setIsLoaded(false);\n        setWeatherToday(filteredResult[0]);\n        props.grabWeather(filteredResult[0]);\n        console.log(filteredResult[0]);\n    }\n\n    var weatherInfo = [];\n\n    if (parsedForecast) {\n        console.log('PARSE')\n        weatherInfo = parsedForecast.map(object => {\n            return (\n            <GridListTile >\n                <WeatherModule \n                    weather={object.weather[0].description}\n                    image={object.weather[0].icon}\n                    temp_max={Math.round(object.main.temp_max*9/5-459.67)}\n                    temp_min={Math.round(object.main.temp_min*9/5-459.673)}\n                    city={weather.city.name}\n                    country={weather.city.country}\n                    date={object.dt_txt}\n                />\n            </GridListTile>\n            )\n        })\n    } \n\n    function updateModule(coords) {\n        console.log(coords)\n        fetch(`http://api.openweathermap.org/data/2.5/forecast?lat=${coords[0].coord.lat}&lon=${coords[0].coord.lon}&units=imperial&APPID=4216d1350fe31af9bf5100bb34fa72e2`)\n        .then(res => res.json())\n        .then((result) => {console.log(result); setWeather(result); setIsLoaded(true) });\n    }\n\n\n    return (\n        <div>\n            <Parallax\n                bgImage={require('./imgs/gabriele-diwald.png')}\n                bgImageAlt=\"Weather\"\n                strength={400}\n            >\n                <div className=\"weather-section\">\n                    <div className=\"row\">\n                        <div className=\"col-12\">\n                           <Typography className={classes.concept} align=\"center\" variant=\"h2\">\n                                Weather Concept\n                           </Typography>\n                        <div className={classes.root}>\n                            \n                            <GridList cellHeight={'auto'} className={classes.gridList} cols={4}>\n                                {weatherInfo}\n                            </GridList>\n                        </div>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-md-6 col-sm-6 col-12\">\n                                <Paper className={classes.weatherInfo}>\n                                    <Typography className={classes.description} align=\"center\" variant=\"h3\">\n                                        Description\n                                    </Typography>\n                                    <Typography variant=\"body1\" align=\"center\" className={classes.description}>\n                                        This concept uses Open Weather Map's 5 day forecast API to render the widgets above.\n                                        It grabs the weather data from Charlotte, NC by default. The color or mood of the \n                                        navigation bar at the top of the screen is based upon the weather of the currently selected city.\n                                        If the user chooses to change the city, they may do so by selecting the State then City of their choice.\n                                        It'll search a DB of cities from around the world provided by Open Weather Map. The list\n                                        isn't specific so it's been narrowed down to a few cities per state within the US. I'm currently\n                                        searching for a better Database with Coordinates as well as Cities/Provinces and States.\n                                    </Typography>\n                                </Paper>\n                            </div>\n                        <div className=\"col-md-6 col-sm-6 col-12\">\n                            <div style={{display: 'flex', alignItems: 'center', width: '80%', height: '100%'}}>\n                                <Search updateModule={updateModule} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Parallax>\n        </div>\n    );\n}\n \nexport default Weather;"]},"metadata":{},"sourceType":"module"}