{"ast":null,"code":"import _slicedToArray from \"/Users/God/Desktop/github/Port/react-portfolio/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/God/Desktop/github/Port/react-portfolio/client/src/components/Showcase/MtnDream/Editor/Tools/Jumbotron.js\";\nimport React, { useContext, useState, Fragment } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Popover, Button, TextField } from '@material-ui/core';\nimport { EditorContext } from '../../../../../context/EditorContext';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    paper: {\n      padding: 20,\n      width: 350\n    }\n  };\n});\n\nvar Jumbotron = function Jumbotron() {\n  var classes = useStyles();\n  var holder = useContext(EditorContext);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      anchorEl = _useState2[0],\n      setAnchorEl = _useState2[1];\n\n  var handleClick = function handleClick(e) {\n    setAnchorEl(e.currentTarget);\n    holder.handleSectionMode({\n      el: 'jumbotron'\n    });\n  };\n\n  var handleClose = function handleClose() {\n    setAnchorEl(null);\n  };\n\n  var open = Boolean(anchorEl);\n  var id = open ? 'simple-popover' : undefined;\n\n  if (holder.jumbotron.src) {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(Button, {\n      style: {\n        width: '50%'\n      },\n      onClick: handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      style: {\n        width: '100%',\n        height: 'auto',\n        margin: '20px 0px'\n      },\n      src: holder.jumbotron.src,\n      alt: holder.title.text,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    })), React.createElement(Popover, {\n      PaperProps: {\n        className: classes.paper\n      },\n      ModalClasses: {\n        className: classes.paper\n      },\n      id: id,\n      open: open,\n      anchorEl: anchorEl,\n      onClose: handleClose,\n      anchorOrigin: {\n        vertical: 'center',\n        horizontal: 'center'\n      },\n      transformOrigin: {\n        vertical: 'center',\n        horizontal: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      style: {\n        width: '100%'\n      },\n      label: \"Paste Url\",\n      variant: \"outlined\",\n      value: holder.jumbotron.src,\n      onChange: function onChange(e) {\n        return holder.handleInput(e, {\n          El: 'jumbotron'\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })));\n  } else {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(Button, {\n      style: {\n        margin: '40px auto 0px auto'\n      },\n      variant: \"contained\",\n      onClick: handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Add Jumbotron\"), React.createElement(Popover, {\n      PaperProps: {\n        className: classes.paper\n      },\n      id: id,\n      open: open,\n      anchorEl: anchorEl,\n      onClose: handleClose,\n      anchorOrigin: {\n        vertical: 'center',\n        horizontal: 'center'\n      },\n      transformOrigin: {\n        vertical: 'center',\n        horizontal: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      style: {\n        width: '100%'\n      },\n      label: \"Paste Url\",\n      variant: \"outlined\",\n      value: holder.jumbotron.src,\n      onChange: function onChange(e) {\n        return holder.handleInput(e, {\n          El: 'jumbotron'\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    })));\n  }\n};\n\nexport default Jumbotron;","map":{"version":3,"sources":["/Users/God/Desktop/github/Port/react-portfolio/client/src/components/Showcase/MtnDream/Editor/Tools/Jumbotron.js"],"names":["React","useContext","useState","Fragment","makeStyles","Popover","Button","TextField","EditorContext","useStyles","theme","paper","padding","width","Jumbotron","classes","holder","anchorEl","setAnchorEl","handleClick","e","currentTarget","handleSectionMode","el","handleClose","open","Boolean","id","undefined","jumbotron","src","height","margin","title","text","className","vertical","horizontal","handleInput","El"],"mappings":"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","sourcesContent":["import React, {\n    useContext,\n    useState,\n    Fragment,\n} from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n    Popover,\n    Button,\n    TextField,\n} from '@material-ui/core';\n\nimport { EditorContext } from '../../../../../context/EditorContext';\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        padding: 20,\n        width: 350,\n    },\n}));\n\nconst Jumbotron = () => {\n\n    const classes = useStyles();\n    const holder = useContext(EditorContext);\n\n    const [anchorEl, setAnchorEl] = useState(null);\n\n    const handleClick = e => {\n        setAnchorEl(e.currentTarget);\n        holder.handleSectionMode({ el: 'jumbotron' });\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const open = Boolean(anchorEl);\n    const id = open ? 'simple-popover' : undefined;\n\n    if (holder.jumbotron.src) {\n        return (\n            <Fragment>\n\n                <Button style={{ width: '50%' }} onClick={handleClick}>\n\n                    <img \n                        style={{\n                            width: '100%',\n                            height: 'auto',\n                            margin: '20px 0px',\n                        }} \n                        src={holder.jumbotron.src} \n                        alt={holder.title.text} \n                    />\n\n                </Button>\n\n                <Popover\n                    PaperProps={{ className: classes.paper }}\n                    ModalClasses={{ className: classes.paper }}\n                    id={id}\n                    open={open}\n                    anchorEl={anchorEl}\n                    onClose={handleClose}\n                    anchorOrigin={{\n                        vertical: 'center',\n                        horizontal: 'center',\n                    }}\n                    transformOrigin={{\n                        vertical: 'center',\n                        horizontal: 'center',\n                    }}\n                > \n\n                    <TextField\n                        style={{ width: '100%' }}\n                        label=\"Paste Url\"\n                        variant=\"outlined\"\n                        value={holder.jumbotron.src}\n                        onChange={(e) => holder.handleInput(e, { El: 'jumbotron' })}\n                    />\n\n                </Popover> \n\n            </Fragment>\n        );\n    } else {\n        return (\n            <Fragment>\n\n                <Button style={{ margin: '40px auto 0px auto' }} variant=\"contained\" onClick={handleClick}>\n                    Add Jumbotron\n                </Button>\n\n                <Popover\n                    PaperProps={{ className: classes.paper }}\n                    id={id}\n                    open={open}\n                    anchorEl={anchorEl}\n                    onClose={handleClose}\n                    anchorOrigin={{\n                        vertical: 'center',\n                        horizontal: 'center',\n                    }}\n                    transformOrigin={{\n                        vertical: 'center',\n                        horizontal: 'center',\n                    }}\n                > \n\n                    <TextField\n                        style={{ width: '100%' }}\n                        label=\"Paste Url\"\n                        variant=\"outlined\"\n                        value={holder.jumbotron.src}\n                        onChange={(e) => holder.handleInput(e, { El: 'jumbotron' })}\n                    />\n\n                </Popover>\n\n            </Fragment>\n        );\n    }\n};\n\nexport default Jumbotron;\n"]},"metadata":{},"sourceType":"module"}