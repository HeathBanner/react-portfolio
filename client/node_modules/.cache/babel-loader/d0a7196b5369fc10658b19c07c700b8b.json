{"ast":null,"code":"'use strict';\n\nvar _construct = require(\"/Users/God/Desktop/github/Port/react-portfolio/client/node_modules/@babel/runtime/helpers/construct\");\n\nvar _toConsumableArray = require(\"/Users/God/Desktop/github/Port/react-portfolio/client/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/Users/God/Desktop/github/Port/react-portfolio/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/God/Desktop/github/Port/react-portfolio/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/God/Desktop/github/Port/react-portfolio/client/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/God/Desktop/github/Port/react-portfolio/client/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/God/Desktop/github/Port/react-portfolio/client/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.setMatchers = exports.getMatchers = exports.setState = exports.getState = exports.INTERNAL_MATCHER_FLAG = void 0;\n\nvar _asymmetricMatchers = require('./asymmetricMatchers');\n\nvar Symbol = global['jest-symbol-do-not-touch'] || global.Symbol; // Global matchers object holds the list of available matchers and\n// the state, that can hold matcher specific values that change over time.\n\nvar JEST_MATCHERS_OBJECT = Symbol.for('$$jest-matchers-object'); // Notes a built-in/internal Jest matcher.\n// Jest may override the stack trace of Errors thrown by internal matchers.\n\nvar INTERNAL_MATCHER_FLAG = Symbol.for('$$jest-internal-matcher');\nexports.INTERNAL_MATCHER_FLAG = INTERNAL_MATCHER_FLAG;\n\nif (!global[JEST_MATCHERS_OBJECT]) {\n  Object.defineProperty(global, JEST_MATCHERS_OBJECT, {\n    value: {\n      matchers: Object.create(null),\n      state: {\n        assertionCalls: 0,\n        expectedAssertionsNumber: null,\n        isExpectingAssertions: false,\n        suppressedErrors: [] // errors that are not thrown immediately.\n\n      }\n    }\n  });\n}\n\nvar getState = function getState() {\n  return global[JEST_MATCHERS_OBJECT].state;\n};\n\nexports.getState = getState;\n\nvar setState = function setState(state) {\n  Object.assign(global[JEST_MATCHERS_OBJECT].state, state);\n};\n\nexports.setState = setState;\n\nvar getMatchers = function getMatchers() {\n  return global[JEST_MATCHERS_OBJECT].matchers;\n};\n\nexports.getMatchers = getMatchers;\n\nvar setMatchers = function setMatchers(matchers, isInternal, expect) {\n  Object.keys(matchers).forEach(function (key) {\n    var matcher = matchers[key];\n    Object.defineProperty(matcher, INTERNAL_MATCHER_FLAG, {\n      value: isInternal\n    });\n\n    if (!isInternal) {\n      // expect is defined\n      var CustomMatcher =\n      /*#__PURE__*/\n      function (_asymmetricMatchers$A) {\n        _inherits(CustomMatcher, _asymmetricMatchers$A);\n\n        function CustomMatcher() {\n          var _this;\n\n          var inverse = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n          _classCallCheck(this, CustomMatcher);\n\n          for (var _len = arguments.length, sample = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            sample[_key - 1] = arguments[_key];\n          }\n\n          _this = _possibleConstructorReturn(this, _getPrototypeOf(CustomMatcher).call(this, sample));\n          _this.inverse = inverse;\n          return _this;\n        }\n\n        _createClass(CustomMatcher, [{\n          key: \"asymmetricMatch\",\n          value: function asymmetricMatch(other) {\n            var _ref = matcher.apply(void 0, [other].concat(_toConsumableArray(this.sample))),\n                pass = _ref.pass;\n\n            return this.inverse ? !pass : pass;\n          }\n        }, {\n          key: \"toString\",\n          value: function toString() {\n            return \"\".concat(this.inverse ? 'not.' : '').concat(key);\n          }\n        }, {\n          key: \"getExpectedType\",\n          value: function getExpectedType() {\n            return 'any';\n          }\n        }, {\n          key: \"toAsymmetricMatcher\",\n          value: function toAsymmetricMatcher() {\n            return \"\".concat(this.toString(), \"<\").concat(this.sample.join(', '), \">\");\n          }\n        }]);\n\n        return CustomMatcher;\n      }(_asymmetricMatchers.AsymmetricMatcher);\n\n      expect[key] = function () {\n        for (var _len2 = arguments.length, sample = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          sample[_key2] = arguments[_key2];\n        }\n\n        return _construct(CustomMatcher, [false].concat(sample));\n      };\n\n      if (!expect.not) {\n        expect.not = {};\n      }\n\n      expect.not[key] = function () {\n        for (var _len3 = arguments.length, sample = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          sample[_key3] = arguments[_key3];\n        }\n\n        return _construct(CustomMatcher, [true].concat(sample));\n      };\n    }\n  });\n  Object.assign(global[JEST_MATCHERS_OBJECT].matchers, matchers);\n};\n\nexports.setMatchers = setMatchers;","map":null,"metadata":{},"sourceType":"script"}