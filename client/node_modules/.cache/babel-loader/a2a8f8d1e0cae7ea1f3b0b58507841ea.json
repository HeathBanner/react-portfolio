{"ast":null,"code":"import _slicedToArray from \"/Users/God/Desktop/github/Port/portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/God/Desktop/github/Port/portfolio/client/src/components/Weather/Weather.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Parallax } from 'react-parallax';\nimport WeatherModule from './WeatherModule';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport Typography from '@material-ui/core/Typography';\nimport Search from './Search';\nimport 'typeface-roboto';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'space-around',\n      height: '300px',\n      overflow: 'hidden',\n      width: '100%'\n    },\n    gridList: {\n      flexWrap: 'nowrap',\n      transform: 'translateZ(0)'\n    },\n    weatherInfo: {\n      background: 'rgb(237, 237, 237, 0.7)',\n      borderRadius: '5px',\n      width: '70%',\n      margin: '50px auto',\n      padding: '20px 40px',\n      fontSize: '17px'\n    },\n    concept: {\n      marginTop: '30px'\n    }\n  };\n});\n\nfunction Weather(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      weather = _useState2[0],\n      setWeather = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      weatherToday = _useState4[0],\n      setWeatherToday = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoaded = _useState6[0],\n      setIsLoaded = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      sentRequest = _useState8[0],\n      setSentRequest = _useState8[1];\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      parsedForecast = _useState10[0],\n      setParsedForecast = _useState10[1];\n\n  var classes = useStyles();\n  useEffect(function () {\n    if (!sentRequest) {\n      setSentRequest(true);\n      fetch('http://api.openweathermap.org/data/2.5/forecast?lat=35.227085&lon=-80.843124&APPID=4216d1350fe31af9bf5100bb34fa72e2').then(function (res) {\n        return res.json();\n      }).then(function (result) {\n        var test = result.list[0].main.temp;\n        console.log(test * 9 / 5 - 459.67);\n        console.log(result);\n        setWeather(result);\n        setSentRequest(true);\n        setIsLoaded(true);\n      });\n    }\n  });\n\n  if (isLoaded) {\n    var dt = '';\n    var filteredResult = weather.list.filter(function (object) {\n      if (dt === '') {\n        dt = object.dt_txt.split(' ');\n        dt = dt[0];\n        return true;\n      }\n\n      var sample = object.dt_txt.split(' ');\n\n      if (dt !== sample[0]) {\n        dt = sample[0];\n        console.log(sample[0]);\n        return true;\n      }\n    });\n    setParsedForecast(filteredResult);\n    setIsLoaded(false);\n    setWeatherToday(filteredResult[0]);\n    props.grabWeather(filteredResult[0]);\n    console.log(filteredResult[0]);\n  }\n\n  var weatherInfo = [];\n\n  if (parsedForecast) {\n    console.log('PARSE');\n    weatherInfo = parsedForecast.map(function (object) {\n      return React.createElement(GridListTile, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(WeatherModule, {\n        weather: object.weather[0].description,\n        image: object.weather[0].icon,\n        temp_max: Math.round(object.main.temp_max * 9 / 5 - 459.67),\n        temp_min: Math.round(object.main.temp_min * 9 / 5 - 459.673),\n        city: weather.city.name,\n        country: weather.city.country,\n        date: object.dt_txt,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }));\n    });\n  }\n\n  function updateModule(coords) {\n    console.log(coords);\n    fetch(\"http://api.openweathermap.org/data/2.5/forecast?lat=\".concat(coords[0].coord.lat, \"&lon=\").concat(coords[0].coord.lon, \"&units=imperial&APPID=4216d1350fe31af9bf5100bb34fa72e2\")).then(function (res) {\n      return res.json();\n    }).then(function (result) {\n      console.log(result);\n      setWeather(result);\n      setIsLoaded(true);\n    });\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(Parallax, {\n    bgImage: require('./imgs/gabriele-diwald.png'),\n    bgImageAlt: \"Weather\",\n    strength: 400,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"weather-section\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.concept,\n    align: \"center\",\n    variant: \"h2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \"Weather Concept\"), React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(GridList, {\n    cellHeight: 'auto',\n    className: classes.gridList,\n    cols: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, weatherInfo)))), React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.weatherInfo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, \"Description\"), React.createElement(Typography, {\n    variant: \"body1\",\n    className: classes.description,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, \"This concept uses Open Weather Map's 5 day forecast API to render the widgets above. It grabs the weather data from Charlotte, NC by default. The color or mood of the navigation bar at the top of the screen is based upon the weather of the currently selected city. If the user chooses to change the city, they may do so by selecting the State then City of their choice. It'll search a DB of cities from around the world provided by Open Weather Map. The list isn't specific so it's been narrowed down to a few cities per state within the US. I'm currently searching for a better Database with Coordinates as well as Cities/Provinces and States.\"))), React.createElement(\"div\", {\n    className: \"col-6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(Search, {\n    updateModule: updateModule,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }))))));\n}\n\nexport default Weather;","map":{"version":3,"sources":["/Users/God/Desktop/github/Port/portfolio/client/src/components/Weather/Weather.js"],"names":["React","useEffect","useState","Parallax","WeatherModule","makeStyles","GridList","GridListTile","Typography","Search","useStyles","theme","root","display","flexWrap","justifyContent","height","overflow","width","gridList","transform","weatherInfo","background","borderRadius","margin","padding","fontSize","concept","marginTop","Weather","props","weather","setWeather","weatherToday","setWeatherToday","isLoaded","setIsLoaded","sentRequest","setSentRequest","parsedForecast","setParsedForecast","classes","fetch","then","res","json","result","test","list","main","temp","console","log","dt","filteredResult","filter","object","dt_txt","split","sample","grabWeather","map","description","icon","Math","round","temp_max","temp_min","city","name","country","updateModule","coords","coord","lat","lon","require"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Parallax } from 'react-parallax';\nimport WeatherModule from './WeatherModule';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport Typography from '@material-ui/core/Typography';\nimport Search from './Search';\n\nimport 'typeface-roboto';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'space-around',\n      height: '300px',\n      overflow: 'hidden',\n      width: '100%',\n    },\n    gridList: {\n      flexWrap: 'nowrap',\n      transform: 'translateZ(0)',\n    },\n    weatherInfo: {\n        background: 'rgb(237, 237, 237, 0.7)',\n        borderRadius: '5px',\n        width: '70%',\n        margin: '50px auto',\n        padding: '20px 40px',\n        fontSize: '17px',\n    },\n    concept: {\n        marginTop: '30px'\n    }\n  }));\n  \n\nfunction Weather(props) {\n\n    const [weather, setWeather] = useState('');\n    const [weatherToday, setWeatherToday] = useState('');\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [sentRequest, setSentRequest] = useState(false);\n    const [parsedForecast, setParsedForecast] = useState(null);\n\n    const classes = useStyles();\n\n\n    useEffect(() => {\n        if (!sentRequest) {\n            setSentRequest(true)\n            fetch('http://api.openweathermap.org/data/2.5/forecast?lat=35.227085&lon=-80.843124&APPID=4216d1350fe31af9bf5100bb34fa72e2')\n            .then(res => res.json())\n            .then((result) => { \n                var test = result.list[0].main.temp\n                console.log(test*9/5-459.67)\n        \n                console.log(result); setWeather(result); setSentRequest(true); setIsLoaded(true);});\n        }\n    })\n\n    if (isLoaded) {\n        var dt = '';\n        const filteredResult = weather.list.filter(object => {\n            if(dt === '') {dt = object.dt_txt.split(' '); dt = dt[0]; return true}\n            const sample = object.dt_txt.split(' ')\n            if (dt !== sample[0]) {dt = sample[0]; console.log(sample[0]); return true}\n        })\n        setParsedForecast(filteredResult);\n        setIsLoaded(false);\n        setWeatherToday(filteredResult[0]);\n        props.grabWeather(filteredResult[0]);\n        console.log(filteredResult[0]);\n    }\n\n    var weatherInfo = [];\n\n    if (parsedForecast) {\n        console.log('PARSE')\n        weatherInfo = parsedForecast.map(object => {\n            return (\n            <GridListTile >\n                <WeatherModule \n                    weather={object.weather[0].description}\n                    image={object.weather[0].icon}\n                    temp_max={Math.round(object.main.temp_max*9/5-459.67)}\n                    temp_min={Math.round(object.main.temp_min*9/5-459.673)}\n                    city={weather.city.name}\n                    country={weather.city.country}\n                    date={object.dt_txt}\n                />\n            </GridListTile>\n            )\n        })\n    } \n\n    function updateModule(coords) {\n        console.log(coords)\n        fetch(`http://api.openweathermap.org/data/2.5/forecast?lat=${coords[0].coord.lat}&lon=${coords[0].coord.lon}&units=imperial&APPID=4216d1350fe31af9bf5100bb34fa72e2`)\n        .then(res => res.json())\n        .then((result) => {console.log(result); setWeather(result); setIsLoaded(true) });\n    }\n\n\n    return (\n        <div>\n            <Parallax\n                bgImage={require('./imgs/gabriele-diwald.png')}\n                bgImageAlt=\"Weather\"\n                strength={400}\n            >\n                <div className=\"weather-section\">\n                    <div className=\"row\">\n                        <div className=\"col-12\">\n                           <Typography className={classes.concept} align=\"center\" variant=\"h2\">\n                                Weather Concept\n                           </Typography>\n                        <div className={classes.root}>\n                            \n                            <GridList cellHeight={'auto'} className={classes.gridList} cols={4}>\n                                {weatherInfo}\n                            </GridList>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-6\">\n                            <div className={classes.weatherInfo}>\n                                <h3>Description</h3>\n                                <Typography variant=\"body1\" className={classes.description}>\n                                    This concept uses Open Weather Map's 5 day forecast API to render the widgets above.\n                                    It grabs the weather data from Charlotte, NC by default. The color or mood of the \n                                    navigation bar at the top of the screen is based upon the weather of the currently selected city.\n                                    If the user chooses to change the city, they may do so by selecting the State then City of their choice.\n                                    It'll search a DB of cities from around the world provided by Open Weather Map. The list\n                                    isn't specific so it's been narrowed down to a few cities per state within the US. I'm currently\n                                    searching for a better Database with Coordinates as well as Cities/Provinces and States.\n                                </Typography>\n                            </div>\n                        </div>\n                        <div className=\"col-6\">\n\n                            <Search updateModule={updateModule} />\n                        </div>\n                    </div>\n                </div>\n            </Parallax>\n        </div>\n    );\n}\n \nexport default Weather;"]},"metadata":{},"sourceType":"module"}