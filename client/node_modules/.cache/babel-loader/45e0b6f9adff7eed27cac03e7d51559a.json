{"ast":null,"code":"import _slicedToArray from \"/Users/God/Desktop/github/Port/react-portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/God/Desktop/github/Port/react-portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/God/Desktop/github/Port/react-portfolio/client/src/components/Weather/Description.js\";\nimport React, { useState, Fragment } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Divider, Popover, Typography, Button } from '@material-ui/core';\nvar useStyles = makeStyles(function (theme) {\n  var _weatherInfo;\n\n  return {\n    button: {\n      margin: '20px auto'\n    },\n    typography: {\n      padding: theme.spacing(2)\n    },\n    weatherInfo: (_weatherInfo = {}, _defineProperty(_weatherInfo, theme.breakpoints.up('md'), {\n      width: '70%',\n      margin: '50px auto',\n      padding: '20px 40px'\n    }), _defineProperty(_weatherInfo, theme.breakpoints.up('sm'), {\n      width: '90%',\n      margin: '50px auto',\n      padding: '20px 40px'\n    }), _defineProperty(_weatherInfo, theme.breakpoints.down('sm'), {\n      width: '90%',\n      margin: '20px auto',\n      padding: '20px 40px'\n    }), _defineProperty(_weatherInfo, theme.breakpoints.down('xs'), {\n      width: '90%',\n      margin: '20px auto',\n      padding: '10px 20px'\n    }), _defineProperty(_weatherInfo, \"padding\", 20), _weatherInfo),\n    title: {\n      marginBottom: 10\n    },\n    description: {\n      marginTop: 20\n    }\n  };\n});\n\nvar Description = function Description() {\n  var classes = useStyles();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      anchorEl = _useState2[0],\n      setAnchorEl = _useState2[1];\n\n  var handleClick = function handleClick(e) {\n    setAnchorEl(e.currentTarget);\n  };\n\n  var handleClose = function handleClose() {\n    setAnchorEl(null);\n  };\n\n  var open = Boolean(anchorEl);\n  var id = open ? 'simple-popover' : undefined;\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(Button, {\n    className: classes.button,\n    \"aria-describedby\": id,\n    variant: \"contained\",\n    onClick: handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Information\"), React.createElement(Popover, {\n    classes: {\n      paper: classes.weatherInfo\n    },\n    id: id,\n    open: open,\n    anchorEl: anchorEl,\n    onClose: handleClose,\n    anchorOrigin: {\n      vertical: 'top',\n      horizontal: 'center'\n    },\n    transformOrigin: {\n      vertical: 'top',\n      horizontal: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.title,\n    align: \"center\",\n    color: \"textSecondary\",\n    variant: \"h3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Description\"), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    variant: \"body1\",\n    align: \"center\",\n    className: classes.description,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"This concept uses Open Weather Map's 5 day forecast API to render the widgets above. It grabs the weather data from Charlotte, NC by default. The color or mood of the navigation bar at the top of the screen is based upon the weather of the currently selected city.\"), React.createElement(Typography, {\n    variant: \"body1\",\n    align: \"center\",\n    className: classes.description,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"If the user chooses to change the city, they may do so by selecting the State then City of their choice. It'll search a DB of cities from around the world provided by Open Weather Map. The list isn't specific so it's been narrowed down to a few cities per state within the US. I'm currently searching for a better Database with Coordinates as well as Cities/Provinces and States.\")));\n};\n\nexport default Description;","map":{"version":3,"sources":["/Users/God/Desktop/github/Port/react-portfolio/client/src/components/Weather/Description.js"],"names":["React","useState","Fragment","makeStyles","Divider","Popover","Typography","Button","useStyles","theme","button","margin","typography","padding","spacing","weatherInfo","breakpoints","up","width","down","title","marginBottom","description","marginTop","Description","classes","anchorEl","setAnchorEl","handleClick","e","currentTarget","handleClose","open","Boolean","id","undefined","paper","vertical","horizontal"],"mappings":"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","sourcesContent":["import React, { useState, Fragment } from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Divider, Popover, Typography, Button } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n        margin: '20px auto',\n    },\n    typography: {\n        padding: theme.spacing(2),\n    },    \n    weatherInfo: {\n        [theme.breakpoints.up('md')]: {\n            width: '70%',\n            margin: '50px auto',\n            padding: '20px 40px',\n        },\n        [theme.breakpoints.up('sm')]: {\n            width: '90%',\n            margin: '50px auto',\n            padding: '20px 40px',\n        },\n        [theme.breakpoints.down('sm')]: {\n            width: '90%',\n            margin: '20px auto',\n            padding: '20px 40px',\n        },\n        [theme.breakpoints.down('xs')]: {\n            width: '90%',\n            margin: '20px auto',\n            padding: '10px 20px',\n        },\n        padding: 20,\n    },\n    title: {\n        marginBottom: 10,\n    },\n    description: {\n        marginTop: 20,\n    },\n}));\n\nconst Description = () => {\n\n    const classes = useStyles();\n    const [anchorEl, setAnchorEl] = useState(null);\n\n    const handleClick = (e) => {\n        setAnchorEl(e.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const open = Boolean(anchorEl);\n    const id = open ? 'simple-popover' : undefined;\n    \n    return (\n        <Fragment>\n\n            <Button className={classes.button} aria-describedby={id} variant=\"contained\" onClick={handleClick}>\n                Information\n            </Button>\n\n            <Popover\n                classes={{paper: classes.weatherInfo}}\n                id={id}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={handleClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center'\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center'\n                }}\n            >\n                    <Typography className={classes.title} align=\"center\" color=\"textSecondary\" variant=\"h3\">\n                        Description\n                    </Typography>\n\n                        <Divider />\n\n                    <Typography variant=\"body1\" align=\"center\" className={classes.description}>\n                        This concept uses Open Weather Map's 5 day forecast API to render the widgets above.\n                        It grabs the weather data from Charlotte, NC by default. The color or mood of the \n                        navigation bar at the top of the screen is based upon the weather of the currently selected city.\n                        \n                    </Typography>\n\n                    <Typography variant=\"body1\" align=\"center\" className={classes.description}>\n                        If the user chooses to change the city, they may do so by selecting the State then City of their choice.\n                        It'll search a DB of cities from around the world provided by Open Weather Map. The list\n                        isn't specific so it's been narrowed down to a few cities per state within the US. I'm currently\n                        searching for a better Database with Coordinates as well as Cities/Provinces and States.\n                    </Typography>\n\n            </Popover>\n\n        </Fragment>\n    );\n}\n\nexport default Description;"]},"metadata":{},"sourceType":"module"}