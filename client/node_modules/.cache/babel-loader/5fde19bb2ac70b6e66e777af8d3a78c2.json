{"ast":null,"code":"import _slicedToArray from \"/Users/God/Desktop/github/Port/react-portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/God/Desktop/github/Port/react-portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/God/Desktop/github/Port/react-portfolio/client/src/components/Weather/Weather.js\";\nimport React, { useEffect, useState, Fragment } from 'react';\nimport { Parallax } from 'react-parallax';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { Divider, useMediaQuery, Grid, GridList, GridListTile, Typography, Paper } from '@material-ui/core';\nimport Search from './Search';\nimport WeatherModule from './WeatherModule';\nimport weatherBG from './imgs/1x/weatherBG.png';\nimport 'typeface-roboto';\nvar useStyles = makeStyles(function (theme) {\n  var _weatherSection, _weatherInfo, _concept;\n\n  return {\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'space-around',\n      //   height: '300px',\n      overflow: 'hidden',\n      width: '100%',\n      marginTop: 180\n    },\n    gridList: {\n      flexWrap: 'nowrap',\n      transform: 'translateZ(0)'\n    },\n    weatherSection: (_weatherSection = {}, _defineProperty(_weatherSection, theme.breakpoints.up('md'), {\n      height: '160vh'\n    }), _defineProperty(_weatherSection, theme.breakpoints.up('sm'), {\n      height: '170vh'\n    }), _defineProperty(_weatherSection, theme.breakpoints.down('sm'), {\n      height: '185vh'\n    }), _defineProperty(_weatherSection, theme.breakpoints.down('xs'), {\n      height: '180vh'\n    }), _defineProperty(_weatherSection, \"backgroundImage\", \"url(\".concat(weatherBG, \")\")), _defineProperty(_weatherSection, \"backgroundSize\", 'cover'), _defineProperty(_weatherSection, \"height\", '160vh'), _weatherSection),\n    weatherInfo: (_weatherInfo = {}, _defineProperty(_weatherInfo, theme.breakpoints.up('md'), {\n      width: '70%',\n      margin: '50px auto',\n      padding: '20px 40px'\n    }), _defineProperty(_weatherInfo, theme.breakpoints.up('sm'), {\n      width: '90%',\n      margin: '50px auto',\n      padding: '20px 40px'\n    }), _defineProperty(_weatherInfo, theme.breakpoints.down('sm'), {\n      width: '90%',\n      margin: '20px auto',\n      padding: '20px 40px'\n    }), _defineProperty(_weatherInfo, theme.breakpoints.down('xs'), {\n      width: '90%',\n      margin: '20px auto',\n      padding: '10px 20px'\n    }), _weatherInfo),\n    concept: (_concept = {}, _defineProperty(_concept, theme.breakpoints.up('md'), {\n      fontSize: '5rem',\n      marginLeft: '180px'\n    }), _defineProperty(_concept, theme.breakpoints.down('sm'), {\n      fontSize: '3.4rem',\n      marginLeft: '180px'\n    }), _defineProperty(_concept, theme.breakpoints.down('xs'), {\n      fontSize: '2rem',\n      marginLeft: '120px'\n    }), _defineProperty(_concept, \"marginTop\", '30px'), _defineProperty(_concept, \"marginLeft\", '80px'), _concept),\n    title: {\n      marginBottom: 10\n    },\n    description: {\n      marginTop: 20\n    }\n  };\n});\n\nfunction Weather(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      weather = _useState2[0],\n      setWeather = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      weatherToday = _useState4[0],\n      setWeatherToday = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoaded = _useState6[0],\n      setIsLoaded = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      sentRequest = _useState8[0],\n      setSentRequest = _useState8[1];\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      parsedForecast = _useState10[0],\n      setParsedForecast = _useState10[1];\n\n  var classes = useStyles();\n  var theme = useTheme();\n  var lg = useMediaQuery(theme.breakpoints.up('md'));\n  var md = useMediaQuery(theme.breakpoints.down('md'));\n  var sm = useMediaQuery(theme.breakpoints.down('sm'));\n  var xs = useMediaQuery(theme.breakpoints.down('xs'));\n\n  function getHeight() {\n    if (xs) {\n      return 200;\n    }\n\n    ;\n\n    if (sm) {\n      return 250;\n    }\n\n    ;\n\n    if (md) {\n      return 300;\n    }\n\n    ;\n\n    if (lg) {\n      return 300;\n    }\n  }\n\n  ;\n\n  function getListCols() {\n    if (xs) {\n      return 1.8;\n    }\n\n    ;\n\n    if (sm) {\n      return 2.2;\n    }\n\n    ;\n\n    if (md) {\n      return 2.8;\n    }\n\n    ;\n\n    if (lg) {\n      return 2.8;\n    }\n\n    ;\n  }\n\n  function getTileRows() {\n    if (xs) {\n      return 1.5;\n    }\n\n    ;\n\n    if (sm) {\n      return 1.2;\n    }\n\n    ;\n\n    if (md) {\n      return 1;\n    }\n\n    ;\n\n    if (lg) {\n      return 1;\n    }\n\n    ;\n  }\n\n  useEffect(function () {\n    if (!sentRequest) {\n      setSentRequest(true);\n      setParsedForecast('');\n      fetch('https://api.openweathermap.org/data/2.5/forecast?lat=35.227085&lon=-80.843124&units=imperial&APPID=4216d1350fe31af9bf5100bb34fa72e2').then(function (res) {\n        return res.json();\n      }).then(function (result) {\n        var test = result.list[0].main.temp;\n        console.log(test * 9 / 5 - 459.67);\n        console.log(result);\n        setWeather(result);\n        setSentRequest(true);\n        setIsLoaded(true);\n      });\n    }\n  });\n\n  if (isLoaded) {\n    var dt = '';\n    var filteredResult = weather.list.filter(function (object) {\n      if (dt === '') {\n        dt = object.dt_txt.split(' ');\n        dt = dt[0];\n        return true;\n      }\n\n      var sample = object.dt_txt.split(' ');\n\n      if (dt !== sample[0]) {\n        dt = sample[0];\n        console.log(sample[0]);\n        return true;\n      }\n    });\n    setParsedForecast(filteredResult);\n    setIsLoaded(false);\n    setWeatherToday(filteredResult[0]);\n    props.grabWeather(filteredResult[0]);\n    console.log(filteredResult[0]);\n  }\n\n  var weatherInfo = [];\n\n  if (parsedForecast) {\n    console.log('PARSE');\n    weatherInfo = parsedForecast.map(function (object) {\n      return React.createElement(GridListTile, {\n        rows: getTileRows(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(WeatherModule, {\n        weather: object.weather[0].description,\n        image: object.weather[0].icon,\n        temp_max: Math.round(object.main.temp_max),\n        temp_min: Math.round(object.main.temp_min),\n        city: weather.city.name,\n        country: weather.city.country,\n        date: object.dt_txt,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }));\n    });\n  }\n\n  function updateModule(coords) {\n    setParsedForecast('');\n    console.log(coords);\n    fetch(\"https://api.openweathermap.org/data/2.5/forecast?lat=\".concat(coords[0].coord.lat, \"&lon=\").concat(coords[0].coord.lon, \"&units=imperial&APPID=4216d1350fe31af9bf5100bb34fa72e2\")).then(function (res) {\n      return res.json();\n    }).then(function (result) {\n      console.log(result);\n      setWeather(result);\n      setIsLoaded(true);\n    });\n  }\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.weatherSection,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.concept,\n    align: \"center\",\n    color: \"primary\",\n    variant: \"h2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, \"Weather Concept\")), React.createElement(Grid, {\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, React.createElement(GridList, {\n    cellHeight: getHeight(),\n    className: classes.gridList,\n    cols: getListCols(),\n    spacing: 8,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, weatherInfo))), React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    md: 6,\n    sm: 12,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, React.createElement(Search, {\n    updateModule: updateModule,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }))), React.createElement(Grid, {\n    md: 6,\n    sm: 12,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }, React.createElement(Paper, {\n    className: classes.weatherInfo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.title,\n    align: \"center\",\n    color: \"textSecondary\",\n    variant: \"h3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, \"Description\"), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    variant: \"body1\",\n    align: \"center\",\n    className: classes.description,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }, \"This concept uses Open Weather Map's 5 day forecast API to render the widgets above. It grabs the weather data from Charlotte, NC by default. The color or mood of the navigation bar at the top of the screen is based upon the weather of the currently selected city.\"), React.createElement(Typography, {\n    variant: \"body1\",\n    align: \"center\",\n    className: classes.description,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  }, \"If the user chooses to change the city, they may do so by selecting the State then City of their choice. It'll search a DB of cities from around the world provided by Open Weather Map. The list isn't specific so it's been narrowed down to a few cities per state within the US. I'm currently searching for a better Database with Coordinates as well as Cities/Provinces and States.\"))))));\n}\n\nexport default Weather;","map":{"version":3,"sources":["/Users/God/Desktop/github/Port/react-portfolio/client/src/components/Weather/Weather.js"],"names":["React","useEffect","useState","Fragment","Parallax","makeStyles","useTheme","Divider","useMediaQuery","Grid","GridList","GridListTile","Typography","Paper","Search","WeatherModule","weatherBG","useStyles","theme","root","display","flexWrap","justifyContent","overflow","width","marginTop","gridList","transform","weatherSection","breakpoints","up","height","down","weatherInfo","margin","padding","concept","fontSize","marginLeft","title","marginBottom","description","Weather","props","weather","setWeather","weatherToday","setWeatherToday","isLoaded","setIsLoaded","sentRequest","setSentRequest","parsedForecast","setParsedForecast","classes","lg","md","sm","xs","getHeight","getListCols","getTileRows","fetch","then","res","json","result","test","list","main","temp","console","log","dt","filteredResult","filter","object","dt_txt","split","sample","grabWeather","map","icon","Math","round","temp_max","temp_min","city","name","country","updateModule","coords","coord","lat","lon"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, Fragment } from 'react';\nimport { Parallax } from 'react-parallax';\n\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { Divider, useMediaQuery, Grid, GridList, GridListTile, Typography, Paper } from '@material-ui/core';\n\nimport Search from './Search';\nimport WeatherModule from './WeatherModule';\n\nimport weatherBG from './imgs/1x/weatherBG.png'\n\nimport 'typeface-roboto';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'space-around',\n    //   height: '300px',\n      overflow: 'hidden',\n      width: '100%',\n      marginTop: 180\n    },\n    gridList: {\n      flexWrap: 'nowrap',\n      transform: 'translateZ(0)',\n    },\n    weatherSection: {\n        [theme.breakpoints.up('md')]: {\n            height: '160vh',\n        },\n        [theme.breakpoints.up('sm')]: {\n            height: '170vh',\n        },\n        [theme.breakpoints.down('sm')]: {\n            height: '185vh',\n        },\n        [theme.breakpoints.down('xs')]: {\n            height: '180vh',\n        },\n        backgroundImage: `url(${weatherBG})`,\n        backgroundSize: 'cover',\n        height: '160vh',\n    },\n    weatherInfo: {\n        [theme.breakpoints.up('md')]: {\n            width: '70%',\n            margin: '50px auto',\n            padding: '20px 40px',\n        },\n        [theme.breakpoints.up('sm')]: {\n            width: '90%',\n            margin: '50px auto',\n            padding: '20px 40px',\n        },\n        [theme.breakpoints.down('sm')]: {\n            width: '90%',\n            margin: '20px auto',\n            padding: '20px 40px',\n        },\n        [theme.breakpoints.down('xs')]: {\n            width: '90%',\n            margin: '20px auto',\n            padding: '10px 20px',\n        },\n    },\n    concept: {\n        [theme.breakpoints.up('md')]: {\n            fontSize: '5rem',\n            marginLeft: '180px',\n        },\n        [theme.breakpoints.down('sm')]: {\n            fontSize: '3.4rem',\n            marginLeft: '180px',\n        },\n        [theme.breakpoints.down('xs')]: {\n            fontSize: '2rem',\n            marginLeft: '120px',\n        },\n        marginTop: '30px',\n        marginLeft: '80px',\n    },\n    title: {\n        marginBottom: 10,\n    },\n    description: {\n        marginTop: 20\n    },\n  }));\n  \n\nfunction Weather(props) {\n\n    const [weather, setWeather] = useState('');\n    const [weatherToday, setWeatherToday] = useState('');\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [sentRequest, setSentRequest] = useState(false);\n    const [parsedForecast, setParsedForecast] = useState(null);\n\n    const classes = useStyles();\n    const theme = useTheme();\n\n    const lg = useMediaQuery(theme.breakpoints.up('md'));\n    const md = useMediaQuery(theme.breakpoints.down('md'));\n    const sm = useMediaQuery(theme.breakpoints.down('sm'));\n    const xs = useMediaQuery(theme.breakpoints.down('xs'));\n\n    function getHeight() {\n        if(xs){return 200};\n        if(sm){return 250};\n        if(md){return 300};\n        if(lg){return 300}\n    };\n\n    function getListCols() {\n        if(xs){return 1.8};\n        if(sm){return 2.2};\n        if(md){return 2.8};\n        if(lg){return 2.8};\n    }\n\n    function getTileRows() {\n        if(xs){return 1.5};\n        if(sm){return 1.2};\n        if(md){return 1};\n        if(lg){return 1};\n    }\n\n    useEffect(() => {\n        if (!sentRequest) {\n            setSentRequest(true)\n            setParsedForecast('')\n            fetch('https://api.openweathermap.org/data/2.5/forecast?lat=35.227085&lon=-80.843124&units=imperial&APPID=4216d1350fe31af9bf5100bb34fa72e2')\n            .then(res => res.json())\n            .then((result) => { \n                var test = result.list[0].main.temp\n                console.log(test*9/5-459.67)\n        \n                console.log(result); setWeather(result); setSentRequest(true); setIsLoaded(true);});\n        }\n    })\n\n    if (isLoaded) {\n        var dt = '';\n        const filteredResult = weather.list.filter(object => {\n            if(dt === '') {dt = object.dt_txt.split(' '); dt = dt[0]; return true}\n            const sample = object.dt_txt.split(' ')\n            if (dt !== sample[0]) {dt = sample[0]; console.log(sample[0]); return true}\n        })\n        setParsedForecast(filteredResult);\n        setIsLoaded(false);\n        setWeatherToday(filteredResult[0]);\n        props.grabWeather(filteredResult[0]);\n        console.log(filteredResult[0]);\n    }\n\n    var weatherInfo = [];\n\n    if (parsedForecast) {\n        console.log('PARSE')\n        weatherInfo = parsedForecast.map(object => {\n            return (\n            <GridListTile rows={getTileRows()} >\n                <WeatherModule \n                    weather={object.weather[0].description}\n                    image={object.weather[0].icon}\n                    temp_max={Math.round(object.main.temp_max)}\n                    temp_min={Math.round(object.main.temp_min)}\n                    city={weather.city.name}\n                    country={weather.city.country}\n                    date={object.dt_txt}\n                />\n            </GridListTile>\n            )\n        })\n    } \n\n    function updateModule(coords) {\n        setParsedForecast('');\n        console.log(coords)\n        fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${coords[0].coord.lat}&lon=${coords[0].coord.lon}&units=imperial&APPID=4216d1350fe31af9bf5100bb34fa72e2`)\n        .then(res => res.json())\n        .then((result) => {console.log(result); setWeather(result); setIsLoaded(true); });\n    }\n\n\n    return (\n        <Fragment>\n            <div className={classes.weatherSection}>\n\n                    <Grid xs={12}>\n\n                        <Typography className={classes.concept} align=\"center\" color=\"primary\" variant=\"h2\">\n                            Weather Concept\n                        </Typography>\n\n                    </Grid>\n\n                    <Grid xs={12}>\n\n                        <div className={classes.root}>\n                            \n                            <GridList cellHeight={getHeight()} className={classes.gridList} cols={getListCols()} spacing={8}>\n                                {weatherInfo}\n                            </GridList>\n\n                        </div>\n\n                    </Grid>\n\n                    <Grid container>\n\n                        <Grid md={6} sm={12} xs={12}>\n                                <div >\n                                    <Search updateModule={updateModule} />\n                                </div>\n                        </Grid>\n\n                        <Grid md={6} sm={12} xs={12}>\n\n                            <Paper className={classes.weatherInfo}>\n                                <Typography className={classes.title} align=\"center\" color=\"textSecondary\" variant=\"h3\">\n                                    Description\n                                </Typography>\n\n                                    <Divider />\n\n                                <Typography variant=\"body1\" align=\"center\" className={classes.description}>\n                                    This concept uses Open Weather Map's 5 day forecast API to render the widgets above.\n                                    It grabs the weather data from Charlotte, NC by default. The color or mood of the \n                                    navigation bar at the top of the screen is based upon the weather of the currently selected city.\n                                    \n                                </Typography>\n\n                                <Typography variant=\"body1\" align=\"center\" className={classes.description}>\n                                    If the user chooses to change the city, they may do so by selecting the State then City of their choice.\n                                    It'll search a DB of cities from around the world provided by Open Weather Map. The list\n                                    isn't specific so it's been narrowed down to a few cities per state within the US. I'm currently\n                                    searching for a better Database with Coordinates as well as Cities/Provinces and States.\n                                </Typography>\n                            </Paper>\n\n                        </Grid>\n\n                    </Grid>\n            </div>\n        </Fragment>\n    );\n}\n \nexport default Weather;"]},"metadata":{},"sourceType":"module"}