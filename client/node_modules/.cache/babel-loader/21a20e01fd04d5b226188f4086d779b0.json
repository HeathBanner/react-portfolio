{"ast":null,"code":"import _toConsumableArray from \"/Users/God/Desktop/github/Port/react-portfolio/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/God/Desktop/github/Port/react-portfolio/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/God/Desktop/github/Port/react-portfolio/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/God/Desktop/github/Port/react-portfolio/client/src/components/Social/Friends.js\";\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { useMediaQuery, Grid, GridList, GridListTile, GridListTileBar, ListSubheader, Typography, Avatar, LinearProgress } from '@material-ui/core';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'center',\n      backgroundColor: theme.palette.background.paper\n    },\n    listContainer: {},\n    gridList: {\n      width: '100%',\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'center',\n      overflow: 'hidden',\n      margin: '0px auto 40px auto !important'\n    },\n    subheader: {\n      textAlign: 'center',\n      margin: '20px 0px'\n    },\n    tile: _defineProperty({}, theme.breakpoints.down('xs'), {\n      width: 400\n    }),\n    icon: {\n      color: 'rgba(255, 255, 255, 0.54)'\n    },\n    avatar: {\n      width: 60,\n      height: 60,\n      margin: '0px 20px 0px 10px'\n    }\n  };\n});\n\nvar Friends = function Friends(props) {\n  var classes = useStyles();\n  var theme = useTheme();\n  var xs = useMediaQuery(theme.breakpoints.down('xs'));\n  var sm = useMediaQuery(theme.breakpoints.down('sm'));\n  var md = useMediaQuery(theme.breakpoints.down('md'));\n  var mdUp = useMediaQuery(theme.breakpoints.up('md'));\n\n  var gridHeight = function gridHeight() {\n    if (xs) {\n      return 120;\n    }\n\n    if (sm) {\n      return 160;\n    }\n\n    if (md) {\n      return 300;\n    }\n\n    if (mdUp) {\n      return 300;\n    }\n  };\n\n  var gridCols = function gridCols() {\n    if (xs) {\n      return 1;\n    }\n\n    if (sm) {\n      return 1;\n    }\n\n    if (md) {\n      return 0.7;\n    }\n\n    if (mdUp) {\n      return 0.7;\n    }\n  };\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loaded = _useState2[0],\n      setLoaded = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      friendList = _useState4[0],\n      setFriendList = _useState4[1];\n\n  useEffect(function () {\n    if (!loaded && props.user) {\n      fetch('/api/social/getFriends', {\n        method: 'POST',\n        body: JSON.stringify({\n          id: props.user._id\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(function (res) {\n        return res.json();\n      }).then(function (result) {\n        setFriendList(_toConsumableArray(result));\n        setLoaded(true);\n      });\n    }\n\n    ;\n  });\n\n  var renderFriends = function renderFriends() {\n    if (friendList.length > 1) {\n      return friendList.map(function (friend) {\n        return React.createElement(GridListTile, {\n          cols: gridCols(),\n          className: classes.tile,\n          key: friend._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: friend.info.skyline,\n          alt: \"skyline\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }), React.createElement(GridListTileBar, {\n          title: friend.username,\n          actionIcon: React.createElement(Avatar, {\n            src: friend.info.avatar,\n            className: classes.avatar,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102\n            },\n            __self: this\n          }),\n          actionPosition: \"left\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }));\n      });\n    } else if (!loaded) {\n      return React.createElement(GridListTile, {\n        cols: 1,\n        className: classes.tile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(LinearProgress, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(GridListTile, {\n        cols: 1,\n        className: classes.tile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"h4\",\n        align: \"center\",\n        color: \"textSecondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \"Sorry, no friends to show \", \"\\xAF|_(\\u30C4)_/\\xAF\"));\n    }\n  };\n\n  return React.createElement(Grid, {\n    item: true,\n    className: classes.listContainer,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(GridList, {\n    cellHeight: gridHeight(),\n    spacing: 18,\n    col: 2.5,\n    className: classes.gridList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, React.createElement(GridListTile, {\n    key: \"Subheader\",\n    cols: 2,\n    style: {\n      height: 'auto'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, React.createElement(ListSubheader, {\n    component: \"div\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h3\",\n    color: \"textSecondary\",\n    className: classes.subheader,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, \"Friends\"))), renderFriends()));\n};\n\nexport default Friends;","map":{"version":3,"sources":["/Users/God/Desktop/github/Port/react-portfolio/client/src/components/Social/Friends.js"],"names":["React","useEffect","useState","makeStyles","useTheme","useMediaQuery","Grid","GridList","GridListTile","GridListTileBar","ListSubheader","Typography","Avatar","LinearProgress","useStyles","theme","root","display","flexWrap","justifyContent","backgroundColor","palette","background","paper","listContainer","gridList","width","overflow","margin","subheader","textAlign","tile","breakpoints","down","icon","color","avatar","height","Friends","props","classes","xs","sm","md","mdUp","up","gridHeight","gridCols","loaded","setLoaded","friendList","setFriendList","user","fetch","method","body","JSON","stringify","id","_id","headers","then","res","json","result","renderFriends","length","map","friend","info","skyline","username"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { useMediaQuery, Grid, GridList, GridListTile, GridListTileBar, ListSubheader, Typography, Avatar, LinearProgress } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'center',\n        backgroundColor: theme.palette.background.paper,\n    },\n    listContainer: {},\n    gridList: {\n        width: '100%',\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'center',\n        overflow: 'hidden',\n        margin: '0px auto 40px auto !important',\n    },\n    subheader: {\n        textAlign: 'center',\n        margin: '20px 0px',\n    },\n    tile: {\n        [theme.breakpoints.down('xs')]: {\n            width: 400,\n        },\n    },\n    icon: {\n        color: 'rgba(255, 255, 255, 0.54)',\n    },\n    avatar: {\n        width: 60,\n        height: 60,\n        margin: '0px 20px 0px 10px',\n    }\n}));\n\nconst Friends = (props) => {\n\n    const classes = useStyles();\n    const theme = useTheme();\n    \n    const xs = useMediaQuery(theme.breakpoints.down('xs'));\n    const sm = useMediaQuery(theme.breakpoints.down('sm'));\n    const md = useMediaQuery(theme.breakpoints.down('md'));\n    const mdUp = useMediaQuery(theme.breakpoints.up('md'));\n\n    const gridHeight = () => {\n        if(xs) {return 120}\n        if(sm) {return 160}\n        if(md) {return 300}\n        if(mdUp) {return 300}\n    }\n\n    const gridCols = () => {\n        if(xs) {return 1}\n        if(sm) {return 1}\n        if(md) {return 0.7}\n        if(mdUp) {return 0.7}\n    }\n\n    const [loaded, setLoaded] = useState(false);\n    const [friendList, setFriendList] = useState([])\n\n    useEffect(() => {\n\n        if( (!loaded) && (props.user) ) {\n            \n            fetch('/api/social/getFriends', {\n                method: 'POST',\n                body: JSON.stringify({id: props.user._id}),\n                headers: {'Content-Type': 'application/json'}\n            })\n            .then(res => res.json())\n            .then((result) => {\n                setFriendList([...result])\n                setLoaded(true);\n            });\n        };\n    });\n\n    const renderFriends = () => {\n        \n        if(friendList.length > 1) {\n\n            return (\n\n                friendList.map((friend) => {\n\n                    return (\n\n                        <GridListTile cols={gridCols()}  className={classes.tile} key={friend._id} >\n                            \n                            <img src={friend.info.skyline} alt=\"skyline\" />\n                            \n                            <GridListTileBar \n                                title={friend.username}\n                                actionIcon={\n                                    <Avatar src={friend.info.avatar} className={classes.avatar} />  \n                                }\n                                actionPosition=\"left\"\n                            />\n\n                        </GridListTile>\n                    );\n                })  \n            );\n        } \n        else if(!loaded) {\n\n            return (\n\n                <GridListTile cols={1} className={classes.tile} >\n                    <LinearProgress />\n                </GridListTile>\n            );\n        }    \n        else {\n\n            return (\n\n                <GridListTile cols={1} className={classes.tile}>\n\n                    <Typography variant=\"h4\" align=\"center\" color=\"textSecondary\" >\n                        Sorry, no friends to show {`¯|_(ツ)_/¯`}\n                    </Typography>\n\n                </GridListTile>\n            );\n        }\n    };\n\n    return (\n        <Grid item className={classes.listContainer} xs={12}>\n\n            <GridList cellHeight={gridHeight()} spacing={18} col={2.5} className={classes.gridList}>\n                \n                <GridListTile key=\"Subheader\" cols={2} style={{height: 'auto'}}>\n                    \n                    <ListSubheader component=\"div\">\n\n                        <Typography variant=\"h3\" color=\"textSecondary\" className={classes.subheader}>Friends</Typography>\n                    \n                    </ListSubheader>\n\n                </GridListTile>\n\n                {renderFriends()}\n\n            </GridList>\n\n        </Grid>\n    );\n};\n\nexport default (Friends);"]},"metadata":{},"sourceType":"module"}