{"ast":null,"code":"import _slicedToArray from \"/Users/God/Desktop/github/Port/portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/God/Desktop/github/Port/portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/God/Desktop/github/Port/portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/God/Desktop/github/Port/portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/God/Desktop/github/Port/portfolio/client/src/context/Story.js\";\nimport React from 'react';\nimport io from 'socket.io-client';\nexport var CTX = React.createContext();\nvar initState = {\n  chats: {}\n};\n\nfunction reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var _action$payload$msg = action.payload.msg,\n      from = _action$payload$msg.from,\n      msg = _action$payload$msg.msg,\n      to = _action$payload$msg.to;\n  console.log(from, msg, to);\n\n  switch (action.type) {\n    case 'RECIEVE_MESSAGE':\n      if (state.chats[to]) {\n        return _objectSpread({}, state, {\n          chats: _defineProperty({}, to, [].concat(_toConsumableArray(state.chats[to]), [{\n            from: from,\n            msg: msg\n          }]))\n        });\n      } else {\n        return _objectSpread({}, state, {\n          chats: _defineProperty({}, to, [{\n            from: from,\n            msg: msg\n          }])\n        });\n      }\n\n    case 'NEW_ROOM':\n      var nextState = _objectSpread({}, state);\n\n      nextState[to] = [];\n      return {\n        nextState: nextState\n      };\n\n    default:\n      return state;\n  }\n}\n\nvar socket;\n\nfunction Store(props) {\n  var channels = [];\n\n  var _React$useReducer = React.useReducer(reducer, initState),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      chats = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  function sendChatAction(value) {\n    socket.emit('chat message', value);\n  }\n\n  if (props.username) {\n    socket.emit('new user', props.username);\n  }\n\n  if (!socket) {\n    socket = io(':3001');\n    socket.on('chat message', function (res) {\n      if (res.msg.to !== user) {\n        channels.push(res.msg.to);\n      } else if (res.msg.from !== user) {\n        channels.push(res.msg.from);\n      }\n\n      console.log(channels);\n      dispatch({\n        type: 'RECIEVE_MESSAGE',\n        payload: res\n      });\n    });\n  }\n\n  var user = props.username ? props.username.username : 'Anon';\n  return React.createElement(CTX.Provider, {\n    value: {\n      chats: chats,\n      sendChatAction: sendChatAction,\n      user: user,\n      channels: channels\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, props.children);\n}\n\nexport default Store;","map":{"version":3,"sources":["/Users/God/Desktop/github/Port/portfolio/client/src/context/Story.js"],"names":["React","io","CTX","createContext","initState","chats","reducer","state","action","payload","msg","from","to","console","log","type","nextState","socket","Store","props","channels","useReducer","dispatch","sendChatAction","value","emit","username","on","res","user","push","children"],"mappings":"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","sourcesContent":["import React from 'react';\nimport io from 'socket.io-client';\n\nexport  const CTX = React.createContext();\n\nconst initState = {\n    chats: {},\n}\n\nfunction reducer(state=initState, action) {\n    const { from, msg, to } = action.payload.msg;\n\n    console.log(from, msg, to);\n    switch(action.type) {\n        case 'RECIEVE_MESSAGE':\n            if(state.chats[to]) {\n                return {\n                    ...state,\n                    chats: {\n                        [to]: [...state.chats[to], {from, msg}]\n                    }\n                }\n            } else {\n                return {\n                    ...state,\n                    chats: {\n                        [to]: [{from, msg}]\n                    }\n                }\n            }\n\n        case 'NEW_ROOM':\n            const nextState = {...state};\n            nextState[to] = [];\n            return {\n                nextState\n            }\n        default:\n            return state\n    }\n}\nlet socket;\n\n\nfunction Store(props) {\n    \n    const channels = [];\n\n    const [chats, dispatch] = React.useReducer(reducer, initState);\n        function sendChatAction(value) {\n            socket.emit('chat message', value);\n        }\n    \n    if(props.username) {\n        socket.emit('new user', props.username)\n    }\n\n    if (!socket) {\n        socket = io(':3001');\n\n        socket.on('chat message', function(res) {\n            if(res.msg.to !== user) {channels.push(res.msg.to);}\n            else if(res.msg.from !== user){channels.push(res.msg.from)}\n            console.log(channels)\n\n            dispatch({type: 'RECIEVE_MESSAGE', payload: res});\n        })\n    }\n    \n    const user = props.username ? props.username.username : 'Anon';\n\n    return (\n        <CTX.Provider value={{chats, sendChatAction, user, channels}}>\n            {props.children}\n        </CTX.Provider>\n    )\n}\n\nexport default Store"]},"metadata":{},"sourceType":"module"}