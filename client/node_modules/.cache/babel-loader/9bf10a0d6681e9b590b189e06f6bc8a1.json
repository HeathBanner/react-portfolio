{"ast":null,"code":"// import React from 'react';\n// import io from 'socket.io-client';\n// export  const CTX = React.createContext();\n// const initState = {\n//     chats: {},\n// }\n// const channels = [];\n// var currentChannel = \"\";\n// function reducer(state=initState, action) {\n//     const { from, msg, to } = action.payload.msg;\n//     console.log(from, msg, to);\n//     switch(action.type) {\n//         case 'RECIEVE_MESSAGE':\n//             if(state.chats[to]) {\n//                 return {\n//                     ...state,\n//                     chats: {\n//                         ...state.chats,\n//                         [currentChannel]: [...state.chats[currentChannel], {from, msg}]\n//                     }\n//                 }\n//             } else {\n//                 return {\n//                     ...state,\n//                     chats: {\n//                         ...state.chats,\n//                         [channels[currentChannel]]: [{from, msg}]\n//                     }\n//                 }\n//             }\n//         case 'NEW_ROOM':\n//             const nextState = {...state};\n//             nextState[to] = [];\n//             return {\n//                 nextState\n//             }\n//         default:\n//             return state\n//     }\n// }\n// let socket;\n// function Store(props) {\n//     const [chats, dispatch] = React.useReducer(reducer, initState);\n//         function sendChatAction(value) {\n//             socket.emit('chat message', value);\n//         }\n//     if(props.username) {\n//         socket.emit('new user', props.username)\n//     }\n//     if (!socket) {\n//         socket = io(':3001');\n//         socket.on('chat message', function(res) {\n//             if(res.msg.to !== user) {channels.push(res.msg.to); currentChannel=res.msg.to}\n//             else if(res.msg.from !== user){channels.push(res.msg.from); currentChannel=res.msg.from}\n//             console.log(channels)\n//             console.log(res.msg)\n//             dispatch({type: 'RECIEVE_MESSAGE', payload: res});\n//         })\n//     }\n//     const user = props.username ? props.username.username : 'Anon';\n//     return (\n//         <CTX.Provider value={{chats, sendChatAction, user, channels}}>\n//             {props.children}\n//         </CTX.Provider>\n//     )\n// }\n// export default Store","map":{"version":3,"sources":["/Users/God/Desktop/github/Port/portfolio/client/src/context/Story.js"],"names":[],"mappings":"AAAA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React from 'react';\n// import io from 'socket.io-client';\n\n// export  const CTX = React.createContext();\n\n// const initState = {\n//     chats: {},\n// }\n\n// const channels = [];\n// var currentChannel = \"\";\n\n// function reducer(state=initState, action) {\n//     const { from, msg, to } = action.payload.msg;\n\n//     console.log(from, msg, to);\n//     switch(action.type) {\n//         case 'RECIEVE_MESSAGE':\n//             if(state.chats[to]) {\n//                 return {\n//                     ...state,\n//                     chats: {\n//                         ...state.chats,\n//                         [currentChannel]: [...state.chats[currentChannel], {from, msg}]\n//                     }\n//                 }\n//             } else {\n//                 return {\n//                     ...state,\n//                     chats: {\n//                         ...state.chats,\n//                         [channels[currentChannel]]: [{from, msg}]\n//                     }\n//                 }\n//             }\n\n//         case 'NEW_ROOM':\n//             const nextState = {...state};\n//             nextState[to] = [];\n//             return {\n//                 nextState\n//             }\n//         default:\n//             return state\n//     }\n// }\n// let socket;\n\n\n// function Store(props) {\n    \n\n//     const [chats, dispatch] = React.useReducer(reducer, initState);\n//         function sendChatAction(value) {\n//             socket.emit('chat message', value);\n//         }\n    \n//     if(props.username) {\n//         socket.emit('new user', props.username)\n//     }\n\n//     if (!socket) {\n//         socket = io(':3001');\n\n//         socket.on('chat message', function(res) {\n//             if(res.msg.to !== user) {channels.push(res.msg.to); currentChannel=res.msg.to}\n//             else if(res.msg.from !== user){channels.push(res.msg.from); currentChannel=res.msg.from}\n//             console.log(channels)\n//             console.log(res.msg)\n\n//             dispatch({type: 'RECIEVE_MESSAGE', payload: res});\n//         })\n//     }\n    \n//     const user = props.username ? props.username.username : 'Anon';\n\n//     return (\n//         <CTX.Provider value={{chats, sendChatAction, user, channels}}>\n//             {props.children}\n//         </CTX.Provider>\n//     )\n// }\n\n// export default Store"]},"metadata":{},"sourceType":"module"}