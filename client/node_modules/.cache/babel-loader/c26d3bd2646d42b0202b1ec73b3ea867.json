{"ast":null,"code":"import _slicedToArray from \"/Users/God/Desktop/github/Port/portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/God/Desktop/github/Port/portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/God/Desktop/github/Port/portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/God/Desktop/github/Port/portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/God/Desktop/github/Port/portfolio/client/src/context/Story.js\";\nimport React from 'react';\nimport io from 'socket.io-client';\nexport var CTX = React.createContext();\nvar initState = {\n  general: [{\n    from: 'aron',\n    msg: 'hello'\n  }, {\n    from: 'aron',\n    msg: 'hello'\n  }, {\n    from: 'aron',\n    msg: 'hello'\n  }],\n  topics: [{\n    from: 'Heath',\n    msg: 'hello'\n  }, {\n    from: 'Heath',\n    msg: 'hello'\n  }]\n};\n\nfunction reducer(state, action) {\n  var _action$payload = action.payload,\n      from = _action$payload.from,\n      msg = _action$payload.msg,\n      topic = _action$payload.topic;\n\n  switch (action.type) {\n    case 'RECIEVE_MESSAGE':\n      return _objectSpread({}, state, _defineProperty({}, topic, [].concat(_toConsumableArray(state[topic]), [{\n        from: from,\n        msg: msg\n      }])));\n\n    default:\n      return state;\n  }\n}\n\nvar socket;\n\nfunction sendChatAction(value) {\n  socket.emit('chat message', value);\n}\n\nfunction Store(props) {\n  var _React$useReducer = React.useReducer(reducer, initState),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      allChats = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  if (props.username) {\n    console.log('NEW MESSAGE');\n    socket.emit('new message', props.username);\n  }\n\n  if (!socket) {\n    socket = io(':3001');\n    socket.on('chat message', function (msg) {\n      dispatch({\n        type: 'RECIEVE_MESSAGE',\n        payload: msg\n      });\n    });\n  }\n\n  var user = props.username ? props.username.username : 'Anon';\n  return React.createElement(CTX.Provider, {\n    value: {\n      allChats: allChats,\n      sendChatAction: sendChatAction,\n      user: user\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, props.children);\n}\n\nexport default Store;","map":{"version":3,"sources":["/Users/God/Desktop/github/Port/portfolio/client/src/context/Story.js"],"names":["React","io","CTX","createContext","initState","general","from","msg","topics","reducer","state","action","payload","topic","type","socket","sendChatAction","value","emit","Store","props","useReducer","allChats","dispatch","username","console","log","on","user","children"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,OAAQ,IAAMC,GAAG,GAAGF,KAAK,CAACG,aAAN,EAAZ;AAER,IAAMC,SAAS,GAAG;AACdC,EAAAA,OAAO,EAAE,CACL;AACIC,IAAAA,IAAI,EAAE,MADV;AACkBC,IAAAA,GAAG,EAAE;AADvB,GADK,EAKL;AACID,IAAAA,IAAI,EAAE,MADV;AACkBC,IAAAA,GAAG,EAAE;AADvB,GALK,EAQL;AACID,IAAAA,IAAI,EAAE,MADV;AACkBC,IAAAA,GAAG,EAAE;AADvB,GARK,CADK;AAadC,EAAAA,MAAM,EAAE,CACJ;AACIF,IAAAA,IAAI,EAAE,OADV;AAEIC,IAAAA,GAAG,EAAE;AAFT,GADI,EAKJ;AACID,IAAAA,IAAI,EAAE,OADV;AAEIC,IAAAA,GAAG,EAAE;AAFT,GALI;AAbM,CAAlB;;AA0BA,SAASE,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAAA,wBACEA,MAAM,CAACC,OADT;AAAA,MACpBN,IADoB,mBACpBA,IADoB;AAAA,MACbC,GADa,mBACbA,GADa;AAAA,MACRM,KADQ,mBACRA,KADQ;;AAE5B,UAAOF,MAAM,CAACG,IAAd;AACI,SAAK,iBAAL;AACI,+BACOJ,KADP,sBAEKG,KAFL,+BAGWH,KAAK,CAACG,KAAD,CAHhB,IAIQ;AAACP,QAAAA,IAAI,EAAJA,IAAD;AAAOC,QAAAA,GAAG,EAAHA;AAAP,OAJR;;AAOJ;AACI,aAAOG,KAAP;AAVR;AAYH;;AACD,IAAIK,MAAJ;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC3BF,EAAAA,MAAM,CAACG,IAAP,CAAY,cAAZ,EAA4BD,KAA5B;AACH;;AAGD,SAASE,KAAT,CAAeC,KAAf,EAAsB;AAAA,0BAEWpB,KAAK,CAACqB,UAAN,CAAiBZ,OAAjB,EAA0BL,SAA1B,CAFX;AAAA;AAAA,MAEXkB,QAFW;AAAA,MAEDC,QAFC;;AAIlB,MAAGH,KAAK,CAACI,QAAT,EAAmB;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAX,IAAAA,MAAM,CAACG,IAAP,CAAY,aAAZ,EAA2BE,KAAK,CAACI,QAAjC;AACH;;AAED,MAAI,CAACT,MAAL,EAAa;AACTA,IAAAA,MAAM,GAAGd,EAAE,CAAC,OAAD,CAAX;AAGAc,IAAAA,MAAM,CAACY,EAAP,CAAU,cAAV,EAA0B,UAASpB,GAAT,EAAc;AACpCgB,MAAAA,QAAQ,CAAC;AAACT,QAAAA,IAAI,EAAE,iBAAP;AAA0BF,QAAAA,OAAO,EAAEL;AAAnC,OAAD,CAAR;AACH,KAFD;AAGH;;AAED,MAAMqB,IAAI,GAAGR,KAAK,CAACI,QAAN,GAAiBJ,KAAK,CAACI,QAAN,CAAeA,QAAhC,GAA2C,MAAxD;AAEA,SACI,oBAAC,GAAD,CAAK,QAAL;AAAc,IAAA,KAAK,EAAE;AAACF,MAAAA,QAAQ,EAARA,QAAD;AAAWN,MAAAA,cAAc,EAAdA,cAAX;AAA2BY,MAAAA,IAAI,EAAJA;AAA3B,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKR,KAAK,CAACS,QADX,CADJ;AAKH;;AAED,eAAeV,KAAf","sourcesContent":["import React from 'react';\nimport io from 'socket.io-client';\n\nexport  const CTX = React.createContext();\n\nconst initState = {\n    general: [\n        {\n            from: 'aron', msg: 'hello',\n        },\n            \n        {   \n            from: 'aron', msg: 'hello',\n        },\n        {  \n            from: 'aron', msg: 'hello',\n        }\n    ],\n    topics: [\n        {\n            from: 'Heath',\n            msg: 'hello',\n        },\n        {\n            from: 'Heath', \n            msg: 'hello',\n        }\n\n    ]\n}\n\nfunction reducer(state, action) {\n    const { from , msg, topic } = action.payload;\n    switch(action.type) {\n        case 'RECIEVE_MESSAGE':\n            return {\n                ...state,\n                [topic]: [\n                    ...state[topic],\n                    {from, msg}\n                ]\n            };\n        default:\n            return state\n    }\n}\nlet socket;\n\nfunction sendChatAction(value) {\n    socket.emit('chat message', value)\n}\n\n\nfunction Store(props) {\n\n    const [allChats, dispatch] = React.useReducer(reducer, initState);\n    \n    if(props.username) {\n        console.log('NEW MESSAGE')\n        socket.emit('new message', props.username)\n    }\n\n    if (!socket) {\n        socket = io(':3001');\n\n\n        socket.on('chat message', function(msg) {\n            dispatch({type: 'RECIEVE_MESSAGE', payload: msg});\n        })\n    }\n\n    const user = props.username ? props.username.username : 'Anon';\n\n    return (\n        <CTX.Provider value={{allChats, sendChatAction, user}}>\n            {props.children}\n        </CTX.Provider>\n    )\n}\n\nexport default Store"]},"metadata":{},"sourceType":"module"}