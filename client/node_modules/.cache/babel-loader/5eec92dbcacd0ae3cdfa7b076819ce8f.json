{"ast":null,"code":"import _toConsumableArray from \"/Users/God/Desktop/github/Port/portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/God/Desktop/github/Port/portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _readOnlyError from \"/Users/God/Desktop/github/Port/portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/readOnlyError\";\nvar _jsxFileName = \"/Users/God/Desktop/github/Port/portfolio/client/src/pages/Chat/Chat.js\";\nimport React, { Fragment, useEffect, useState, useContext } from 'react';\nimport { COMMUNITY_CHAT, MESSAGE_SENT, MESSAGE_RECIEVED, TYPING } from '../../socket/events';\nimport AuthContext from '../../context/AuthContext';\nimport SideBar from '../../components/Social/Chat/SideBar';\nimport ChatHeading from '../../components/Social/Chat/chatHeading';\nimport Messages from '../../components/Social/Chat/messages/Messages';\nimport MessageInput from '../../components/Social/Chat/messages/MessageInput';\n\nfunction Chat(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      chats = _useState2[0],\n      setChats = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      activeChat = _useState4[0],\n      setActiveChat = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loaded = _useState6[0],\n      setLoaded = _useState6[1];\n\n  var auth = useContext(AuthContext);\n  useEffect(function () {\n    if (auth.socket && !loaded) {\n      setLoaded(true);\n      var socket = auth.socket;\n      socket.emit(COMMUNITY_CHAT, resetChat);\n    }\n  });\n\n  function resetChat(chat) {\n    console.log('RESET', chat);\n    return addChat(chat, true);\n  }\n\n  function addChat(chat, reset) {\n    console.log(chat.id);\n    var socket = auth.socket;\n    var newChats = reset ? [chat] : [].concat(_toConsumableArray(chats), [chat]);\n    setChats({\n      chats: newChats\n    });\n    setActiveChat(activeChat = (_readOnlyError(\"activeChat\"), reset ? chat : activeChat));\n    var messageEvent = \"\".concat(MESSAGE_RECIEVED, \"-\").concat(chat.id);\n    var typingEvent = \"\".concat(TYPING, \"-\").concat(chat.id);\n    socket.on(typingEvent, updateTypingChat(chat.id));\n    socket.on(\"\".concat(MESSAGE_RECIEVED, \"-\").concat(chat.id), addMessageToChat(chat.id));\n  }\n\n  function addMessageToChat(chatId) {\n    console.log('GOT IT', chatId);\n    return function (message) {\n      var newChats = chats.map(function (chat) {\n        if (chat.id === chatId) {\n          chat.messages.push(message);\n        }\n\n        return chat;\n      });\n      setChats({\n        chats: newChats\n      });\n    };\n  }\n\n  function _sendMessage(chatId, message) {\n    var socket = auth.socket;\n    socket.emit(MESSAGE_SENT, (chatId, message));\n  }\n\n  function updateTypingChat(chatId) {\n    console.log('UPDATE TYPING CHAT');\n    return function (_ref) {\n      var isTyping = _ref.isTyping,\n          user = _ref.user;\n\n      if (user !== props.user.name) {\n        var newChats = chats.map(function (chat) {\n          if (chat.id === chatId) {\n            if (isTyping && !chat.typingUsers.includes(user)) {\n              chat.typingUsers.push(user);\n            } else if (!isTyping && chat.typingUser.includes(user)) {\n              chat.typingUsers = chat.typingUsers.filter(function (u) {\n                return u !== user;\n              });\n            }\n          }\n\n          return chat;\n        });\n        setChats({\n          chats: newChats\n        });\n      }\n    };\n  }\n\n  function _sendTyping(chatId, message) {\n    var socket = auth.socket;\n    socket.emit(MESSAGE_SENT, {\n      chatId: chatId,\n      message: message\n    });\n  }\n\n  function updateActiveChat(activeChat) {\n    setActiveChat(activeChat);\n  }\n\n  function renderChat() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(SideBar, {\n      chats: chats,\n      activeChat: activeChat,\n      setActiveChat: updateActiveChat,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"chat-room-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, activeChat !== null ? React.createElement(\"div\", {\n      className: \"chat-room\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(ChatHeading, {\n      name: activeChat.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(Messages, {\n      messages: activeChat.messages,\n      typingUsers: activeChat.typingUsers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(MessageInput, {\n      sendMessage: function sendMessage(message) {\n        _sendMessage(activeChat.id, message);\n      },\n      sendTyping: function sendTyping(isTyping) {\n        console.log(activeChat, isTyping);\n\n        _sendTyping(activeChat.id, isTyping);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      className: \"chat-room choose\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Choose a chat!\")))));\n  }\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, renderChat());\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/God/Desktop/github/Port/portfolio/client/src/pages/Chat/Chat.js"],"names":["React","Fragment","useEffect","useState","useContext","COMMUNITY_CHAT","MESSAGE_SENT","MESSAGE_RECIEVED","TYPING","AuthContext","SideBar","ChatHeading","Messages","MessageInput","Chat","props","chats","setChats","activeChat","setActiveChat","loaded","setLoaded","auth","socket","emit","resetChat","chat","console","log","addChat","reset","id","newChats","messageEvent","typingEvent","on","updateTypingChat","addMessageToChat","chatId","message","map","messages","push","sendMessage","isTyping","user","name","typingUsers","includes","typingUser","filter","u","sendTyping","updateActiveChat","renderChat"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState, useContext } from 'react';\n\nimport { COMMUNITY_CHAT, MESSAGE_SENT, MESSAGE_RECIEVED, TYPING } from '../../socket/events';\n\nimport AuthContext from '../../context/AuthContext';\n\nimport SideBar from '../../components/Social/Chat/SideBar';\nimport ChatHeading from '../../components/Social/Chat/chatHeading';\nimport Messages from '../../components/Social/Chat/messages/Messages';\nimport MessageInput from '../../components/Social/Chat/messages/MessageInput';\n\nfunction Chat(props) {\n\n    const [chats, setChats] = useState([]);\n    const [activeChat, setActiveChat] = useState('');\n    const [loaded, setLoaded] = useState(false);\n\n    const auth = useContext(AuthContext);\n\n    useEffect(() => {\n        if(auth.socket && !loaded) {\n            setLoaded(true);\n            const { socket } = auth;\n            socket.emit(COMMUNITY_CHAT, resetChat);\n        }\n    })\n\n    function resetChat(chat) {\n        console.log('RESET', chat)\n        return addChat(chat, true);\n    }\n\n    function addChat(chat, reset) {\n        console.log(chat.id)\n        const { socket } = auth;\n        const newChats = reset ? [chat] : [...chats, chat];\n        setChats({chats: newChats})\n        setActiveChat(activeChat = reset ? chat : activeChat);\n        const messageEvent = `${MESSAGE_RECIEVED}-${chat.id}`;\n        const typingEvent = `${TYPING}-${chat.id}`;\n        \n        socket.on(typingEvent, updateTypingChat(chat.id));\n        socket.on(`${MESSAGE_RECIEVED}-${chat.id}`, addMessageToChat(chat.id));\n    } \n\n    function addMessageToChat(chatId) {\n        console.log('GOT IT', chatId)\n        return message => {\n            let newChats = chats.map((chat) => {\n                if (chat.id === chatId) {\n                    chat.messages.push(message);\n                }\n                return chat;\n            });\n            setChats({chats: newChats});\n        };\n    }\n\n    function sendMessage(chatId, message) {\n        const { socket } = auth;\n        socket.emit(MESSAGE_SENT, (chatId, message));\n    }\n\n    function updateTypingChat(chatId) {\n        console.log('UPDATE TYPING CHAT')\n        return ({isTyping, user}) => {\n            if(user !== props.user.name) {\n                let newChats = chats.map((chat) => {\n                    if(chat.id === chatId) {\n                        if(isTyping && !chat.typingUsers.includes(user)) {\n                            chat.typingUsers.push(user);\n                        } else if (!isTyping && chat.typingUser.includes(user)) {\n                            chat.typingUsers = chat.typingUsers.filter(u => u !== user)\n                        }\n                    }\n                    return chat;\n                })\n                setChats({chats: newChats});\n            }\n        }\n    }\n\n    function sendTyping(chatId, message) {\n        const { socket } = auth;\n        socket.emit(MESSAGE_SENT, {chatId, message});\n    }\n\n    function updateActiveChat(activeChat) {\n        setActiveChat(activeChat);\n    }\n\n    function renderChat() {\n        return (\n            <Fragment>\n                <div className=\"container\">\n                        <SideBar\n                            chats={chats}\n                            activeChat={activeChat}\n                            setActiveChat={updateActiveChat}\n                            />\n                        <div className=\"chat-room-container\">\n                            {\n                                activeChat !== null ? (\n    \n                                    <div className=\"chat-room\">\n                                        <ChatHeading name={activeChat.name} />\n                                        <Messages \n                                            messages={activeChat.messages}\n                                            typingUsers={activeChat.typingUsers}\n                                        />\n                                        <MessageInput \n                                            sendMessage={\n                                                (message)=>{\n                                                    sendMessage(activeChat.id, message)\n                                                }\n                                            }\n                                            sendTyping={\n                                                (isTyping)=>{\n                                                    console.log(activeChat, isTyping)\n                                                    sendTyping(activeChat.id, isTyping)\n                                                }\n                                            }\n                                        />\n    \n                                    </div>\n                                ):\n                                <div className=\"chat-room choose\">\n                                    <h3>Choose a chat!</h3>\n                                </div>\n                            }\n                        </div>\n    \n                    </div>\n            </Fragment>\n        )\n    }\n\n    return (\n        <Fragment>\n            {renderChat()}\n        </Fragment>\n    )\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}