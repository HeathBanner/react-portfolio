{"ast":null,"code":"import _toConsumableArray from \"/Users/God/Desktop/github/Port/react-portfolio/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/God/Desktop/github/Port/react-portfolio/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/God/Desktop/github/Port/react-portfolio/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/God/Desktop/github/Port/react-portfolio/client/src/context/EditorContext.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, createContext, useEffect } from 'react';\nexport var EditorContext = createContext(); // The initial state for text elements\n\nvar intialPreview = {\n  text: '',\n  bold: false,\n  italic: false,\n  underline: false,\n  color: 'black',\n  highlight: false,\n  font: 'Roboto',\n  justify: 'left',\n  textStyle: 'body1',\n  marginTop: 40,\n  marginBottom: 0,\n  isText: true,\n  isImage: false\n}; // The initial state for Info\n\nvar initialInfo = {\n  text: '',\n  font: 'Roboto',\n  justify: 'center',\n  color: ''\n}; // The initial state for Images\n\nvar initialImg = {\n  isImage: true,\n  src: '',\n  alt: '',\n  height: '',\n  width: '',\n  justify: 'center',\n  marginTop: 40,\n  marginBottom: 0\n};\nexport var EditorProvider = function EditorProvider(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      editMode = _useState2[0],\n      setEditMode = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      articleList = _useState4[0],\n      setArticleList = _useState4[1];\n\n  var _useState5 = useState({\n    el: 'title'\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      sectionMode = _useState6[0],\n      setSectionMode = _useState6[1];\n\n  var _useState7 = useState(_objectSpread({}, intialPreview, {\n    isPublished: false\n  })),\n      _useState8 = _slicedToArray(_useState7, 2),\n      title = _useState8[0],\n      setTitle = _useState8[1];\n\n  var _useState9 = useState(_objectSpread({}, initialInfo, {\n    textStyle: 'h5'\n  })),\n      _useState10 = _slicedToArray(_useState9, 2),\n      description = _useState10[0],\n      setDescription = _useState10[1];\n\n  var _useState11 = useState(_objectSpread({}, initialInfo)),\n      _useState12 = _slicedToArray(_useState11, 2),\n      readLength = _useState12[0],\n      setReadLength = _useState12[1];\n\n  var _useState13 = useState(_objectSpread({}, initialImg)),\n      _useState14 = _slicedToArray(_useState13, 2),\n      jumbotron = _useState14[0],\n      setJumbotron = _useState14[1];\n\n  var _useState15 = useState([_objectSpread({}, intialPreview)]),\n      _useState16 = _slicedToArray(_useState15, 2),\n      body = _useState16[0],\n      setBody = _useState16[1]; // Once component mounts it will fetch a list of the\n  // top ten most recent articles\n\n\n  useEffect(function () {\n    fetch('/api/blog/getList').then(function (res) {\n      return res.json();\n    }).then(function (result) {\n      setArticleList(_toConsumableArray(result));\n    }).catch(function (error) {\n      return;\n    });\n  }, []); // Function toggles edit mode on or off\n\n  var handleMode = function handleMode() {\n    setEditMode(!editMode);\n  }; // Once the user clicks on the article they wish to edit, it will then\n  // grab the article elements and set them to state.\n\n\n  var editArticle = function editArticle(title) {\n    if (title === 'new') {\n      return;\n    }\n\n    fetch('/api/blog/getArticle', {\n      method: 'POST',\n      body: JSON.stringify({\n        title: title\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (result) {\n      setTitle(result.title);\n      setDescription(result.description);\n      setReadLength(result.readLength);\n      setJumbotron(result.jumbotron);\n      setBody(result.body);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }; // Once the user clicks on any element. The \"section mode\" will\n  // switch to the appropriate state to handle further edits within the element\n\n\n  var handleSectionMode = function handleSectionMode(newSection) {\n    switch (newSection.el) {\n      case 'title':\n        setSectionMode(newSection);\n        break;\n\n      case 'description':\n        setSectionMode(newSection);\n        break;\n\n      case 'readLength':\n        setSectionMode(_objectSpread({}, newSection));\n        break;\n\n      case 'jumbotron':\n        setSectionMode(newSection);\n        break;\n\n      case 'body':\n        setSectionMode(newSection);\n        break;\n\n      case 'image':\n        setSectionMode(newSection);\n        break;\n\n      default:\n        return;\n    }\n  }; // This function will set the Title state to published if the article\n  // was successfully stored within the database\n\n\n  var setPublished = function setPublished() {\n    setTitle(_objectSpread({}, title, {\n      isPublished: true\n    }));\n  }; // This function will handle the user input then update the Body state\n\n\n  var handleBody = function handleBody(input, index) {\n    var newBody = body;\n    newBody[index].text = input;\n    setBody(_toConsumableArray(newBody));\n  }; // This function will create a new body element within the state\n\n\n  var newBody = function newBody() {\n    var newBody = body;\n    newBody.push(_objectSpread({}, intialPreview));\n    setBody(_toConsumableArray(newBody));\n  }; // This function will store the url posted within the input and update the state\n\n\n  var handleImage = function handleImage(input, index) {\n    var newBody = body;\n    newBody[index].src = input;\n    setBody(_toConsumableArray(newBody));\n  }; // This function will create a new Image element within the\n  // Body and update the state\n\n\n  var newImgEl = function newImgEl() {\n    var newBody = body;\n    newBody.push(_objectSpread({}, initialImg));\n    setBody(_toConsumableArray(newBody));\n  }; // This function will check which section the user has selected and\n  // update the state with the new input\n\n\n  var handleInput = function handleInput(e, section) {\n    var input = e.target.value;\n\n    switch (section.El) {\n      case 'title':\n        setTitle(_objectSpread({}, title, {\n          text: input\n        }));\n        break;\n\n      case 'description':\n        setDescription(_objectSpread({}, description, {\n          text: input\n        }));\n        break;\n\n      case 'readLength':\n        setReadLength(_objectSpread({}, readLength, {\n          text: input\n        }));\n        break;\n\n      case 'jumbotron':\n        setJumbotron(_objectSpread({}, jumbotron, {\n          src: input\n        }));\n        break;\n\n      case 'body':\n        handleBody(input, section.index);\n        break;\n\n      case 'image':\n        handleImage(input, section.index);\n        break;\n\n      default:\n        return;\n    }\n  }; // This function will check which section the user is in and\n  // change the font value to the selected font\n\n\n  var handleFont = function handleFont(newFont) {\n    switch (sectionMode.el) {\n      case 'title':\n        setTitle(_objectSpread({}, title, {\n          font: newFont\n        }));\n        break;\n\n      case 'description':\n        setDescription(_objectSpread({}, description, {\n          font: newFont\n        }));\n        break;\n\n      case 'readLength':\n        setReadLength(_objectSpread({}, readLength, {\n          font: newFont\n        }));\n        break;\n\n      case 'body':\n        var _newBody = body;\n        _newBody[sectionMode.index].font = newFont;\n        setBody(_toConsumableArray(_newBody));\n        break;\n\n      default:\n        break;\n    }\n  }; // This function will check with section the user is in\n  // and update the value with the new selected value\n\n\n  var handleStyling = function handleStyling(style) {\n    switch (sectionMode.el) {\n      case 'title':\n        setTitle(_objectSpread({}, title, _defineProperty({}, style, !title[style])));\n        break;\n\n      case 'body':\n        var _newBody2 = body;\n        _newBody2[sectionMode.index][style] = !_newBody2[sectionMode.index][style];\n        setBody(_toConsumableArray(_newBody2));\n        break;\n\n      default:\n        break;\n    }\n  }; // This function will check with section the user is in\n  // and update the value with the new selected value\n\n\n  var handleInfoJustify = function handleInfoJustify(justification) {\n    if (sectionMode.el === 'description') {\n      switch (justification) {\n        case 'left':\n          setDescription(_objectSpread({}, description, {\n            justify: 'left'\n          }));\n          break;\n\n        case 'center':\n          setDescription(_objectSpread({}, description, {\n            justify: 'center'\n          }));\n          break;\n\n        case 'right':\n          setDescription(_objectSpread({}, description, {\n            justify: 'right'\n          }));\n          break;\n\n        default:\n          setDescription(_objectSpread({}, description, {\n            justify: 'justify'\n          }));\n          break;\n      }\n    } else {\n      switch (justification) {\n        case 'left':\n          setReadLength(_objectSpread({}, readLength, {\n            justify: 'flex-start'\n          }));\n          break;\n\n        case 'center':\n          setReadLength(_objectSpread({}, readLength, {\n            justify: 'center'\n          }));\n          break;\n\n        case 'right':\n          setReadLength(_objectSpread({}, readLength, {\n            justify: 'flex-end'\n          }));\n          break;\n\n        default:\n          return;\n      }\n    }\n  }; // This function will check with section the user is in\n  // and update the value with the new selected value\n\n\n  var handleJumboJustify = function handleJumboJustify(justification) {\n    switch (justification) {\n      case 'left':\n        setJumbotron(_objectSpread({}, jumbotron, {\n          justify: 'flex-start'\n        }));\n        break;\n\n      case 'center':\n        setJumbotron(_objectSpread({}, jumbotron, {\n          justify: 'center'\n        }));\n        break;\n\n      default:\n        setJumbotron(_objectSpread({}, jumbotron, {\n          justify: 'flex-end'\n        }));\n        break;\n    }\n  }; // This function will check with section the user is in\n  // and update the value with the new selected value\n\n\n  var handleImageJustify = function handleImageJustify(justification) {\n    var newBody = body;\n\n    switch (justification) {\n      case 'left':\n        newBody[sectionMode.index].justify = 'flex-start';\n        setBody(_toConsumableArray(newBody));\n        break;\n\n      case 'center' || 'justify':\n        newBody[sectionMode.index].justify = 'center';\n        setBody(_toConsumableArray(newBody));\n        break;\n\n      default:\n        newBody[sectionMode.index].justify = 'flex-end';\n        setBody(_toConsumableArray(newBody));\n        break;\n    }\n  }; // This function will check with section the user is in\n  // and update the value with the new selected value\n\n\n  var handleJustify = function handleJustify(justification) {\n    switch (sectionMode.el) {\n      case 'title':\n        setTitle(_objectSpread({}, title, {\n          justify: justification\n        }));\n        break;\n\n      case 'description':\n        handleInfoJustify(justification);\n        break;\n\n      case 'readLength':\n        handleInfoJustify(justification);\n        break;\n\n      case 'jumbotron':\n        handleJumboJustify(justification);\n        break;\n\n      case 'body':\n        var _newBody3 = body;\n        _newBody3[sectionMode.index].justify = justification;\n        setBody(_toConsumableArray(_newBody3));\n        break;\n\n      case 'image':\n        handleImageJustify(justification);\n        break;\n\n      default:\n        break;\n    }\n  }; // This function will check with section the user is in\n  // and update the value with the new selected value\n\n\n  var handleTextStyle = function handleTextStyle(style) {\n    switch (sectionMode.el) {\n      case 'title':\n        setTitle(_objectSpread({}, title, {\n          textStyle: style\n        }));\n        break;\n\n      case 'body':\n        var _newBody4 = body;\n        _newBody4[sectionMode.index].textStyle = style;\n        setBody(_toConsumableArray(_newBody4));\n        break;\n\n      default:\n        break;\n    }\n  }; // This function will check with section the user is in\n  // and update the value with the new selected value\n\n\n  var handleTextColor = function handleTextColor(color) {\n    switch (sectionMode.el) {\n      case 'title':\n        setTitle(_objectSpread({}, title, {\n          color: color\n        }));\n        break;\n\n      case 'description':\n        setDescription(_objectSpread({}, description, {\n          color: color\n        }));\n        break;\n\n      case 'body':\n        var _newBody5 = body;\n        _newBody5[sectionMode.index].color = color;\n        setBody(_toConsumableArray(_newBody5));\n        break;\n\n      default:\n        break;\n    }\n  }; // This function will check with section the user is in\n  // and update the value with the new selected value\n\n\n  var handleMarginTop = function handleMarginTop(e) {\n    if (sectionMode.el === 'title') {\n      return setTitle(_objectSpread({}, title, {\n        marginTop: e.target.value\n      }));\n    } else if (sectionMode.el === 'body' || sectionMode.el === 'image') {\n      var _newBody6 = body;\n      _newBody6[sectionMode.index].marginTop = e.target.value;\n      return setBody(_toConsumableArray(_newBody6));\n    }\n  }; // This function will check with section the user is in\n  // and update the value with the new selected value\n\n\n  var handleMarginBottom = function handleMarginBottom(e) {\n    if (sectionMode.el === 'title') {\n      return setTitle(_objectSpread({}, title, {\n        marginBottom: e.target.value\n      }));\n    } else if (sectionMode.el === 'body' || sectionMode.el === 'image') {\n      var _newBody7 = body;\n      _newBody7[sectionMode.index].marginBottom = e.target.value;\n      return setBody(_toConsumableArray(_newBody7));\n    }\n  }; // All functions and variables listed will be shared with the child consumers\n\n\n  return React.createElement(EditorContext.Provider, {\n    value: {\n      handleInput: handleInput,\n      handleStyling: handleStyling,\n      handleFont: handleFont,\n      handleJustify: handleJustify,\n      handleTextStyle: handleTextStyle,\n      handleTextColor: handleTextColor,\n      handleMarginTop: handleMarginTop,\n      handleMarginBottom: handleMarginBottom,\n      handleMode: handleMode,\n      handleSectionMode: handleSectionMode,\n      sectionMode: sectionMode,\n      setPublished: setPublished,\n      articleList: articleList,\n      editMode: editMode,\n      editArticle: editArticle,\n      newBody: newBody,\n      newImgEl: newImgEl,\n      title: title,\n      description: description,\n      readLength: readLength,\n      jumbotron: jumbotron,\n      body: body\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383\n    },\n    __self: this\n  }, props.children);\n};","map":{"version":3,"sources":["/Users/God/Desktop/github/Port/react-portfolio/client/src/context/EditorContext.js"],"names":["React","useState","createContext","useEffect","EditorContext","intialPreview","text","bold","italic","underline","color","highlight","font","justify","textStyle","marginTop","marginBottom","isText","isImage","initialInfo","initialImg","src","alt","height","width","EditorProvider","props","editMode","setEditMode","articleList","setArticleList","el","sectionMode","setSectionMode","isPublished","title","setTitle","description","setDescription","readLength","setReadLength","jumbotron","setJumbotron","body","setBody","fetch","then","res","json","result","catch","error","handleMode","editArticle","method","JSON","stringify","headers","console","log","handleSectionMode","newSection","setPublished","handleBody","input","index","newBody","push","handleImage","newImgEl","handleInput","e","section","target","value","El","handleFont","newFont","handleStyling","style","handleInfoJustify","justification","handleJumboJustify","handleImageJustify","handleJustify","handleTextStyle","handleTextColor","handleMarginTop","handleMarginBottom","children"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IACIC,QADJ,EAEIC,aAFJ,EAGIC,SAHJ,QAIO,OAJP;AAMA,OAAO,IAAMC,aAAa,GAAGF,aAAa,EAAnC,C,CAEP;;AACA,IAAMG,aAAa,GAAG;AAClBC,EAAAA,IAAI,EAAE,EADY;AAElBC,EAAAA,IAAI,EAAE,KAFY;AAGlBC,EAAAA,MAAM,EAAE,KAHU;AAIlBC,EAAAA,SAAS,EAAE,KAJO;AAKlBC,EAAAA,KAAK,EAAE,OALW;AAMlBC,EAAAA,SAAS,EAAE,KANO;AAOlBC,EAAAA,IAAI,EAAE,QAPY;AAQlBC,EAAAA,OAAO,EAAE,MARS;AASlBC,EAAAA,SAAS,EAAE,OATO;AAUlBC,EAAAA,SAAS,EAAE,EAVO;AAWlBC,EAAAA,YAAY,EAAE,CAXI;AAYlBC,EAAAA,MAAM,EAAE,IAZU;AAalBC,EAAAA,OAAO,EAAE;AAbS,CAAtB,C,CAeA;;AACA,IAAMC,WAAW,GAAG;AAChBb,EAAAA,IAAI,EAAE,EADU;AAEhBM,EAAAA,IAAI,EAAE,QAFU;AAGhBC,EAAAA,OAAO,EAAE,QAHO;AAIhBH,EAAAA,KAAK,EAAE;AAJS,CAApB,C,CAMA;;AACA,IAAMU,UAAU,GAAG;AACfF,EAAAA,OAAO,EAAE,IADM;AAEfG,EAAAA,GAAG,EAAE,EAFU;AAGfC,EAAAA,GAAG,EAAE,EAHU;AAIfC,EAAAA,MAAM,EAAE,EAJO;AAKfC,EAAAA,KAAK,EAAE,EALQ;AAMfX,EAAAA,OAAO,EAAE,QANM;AAOfE,EAAAA,SAAS,EAAE,EAPI;AAQfC,EAAAA,YAAY,EAAE;AARC,CAAnB;AAWA,OAAO,IAAMS,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAW;AAAA,kBAELzB,QAAQ,CAAC,KAAD,CAFH;AAAA;AAAA,MAE9B0B,QAF8B;AAAA,MAEpBC,WAFoB;;AAAA,mBAGC3B,QAAQ,CAAC,EAAD,CAHT;AAAA;AAAA,MAG9B4B,WAH8B;AAAA,MAGjBC,cAHiB;;AAAA,mBAKC7B,QAAQ,CAAC;AAAE8B,IAAAA,EAAE,EAAE;AAAN,GAAD,CALT;AAAA;AAAA,MAK9BC,WAL8B;AAAA,MAKjBC,cALiB;;AAAA,mBAMXhC,QAAQ,mBAAMI,aAAN;AAAqB6B,IAAAA,WAAW,EAAE;AAAlC,KANG;AAAA;AAAA,MAM9BC,KAN8B;AAAA,MAMvBC,QANuB;;AAAA,mBAOCnC,QAAQ,mBAAMkB,WAAN;AAAmBL,IAAAA,SAAS,EAAE;AAA9B,KAPT;AAAA;AAAA,MAO9BuB,WAP8B;AAAA,MAOjBC,cAPiB;;AAAA,oBAQDrC,QAAQ,mBAAMkB,WAAN,EARP;AAAA;AAAA,MAQ9BoB,UAR8B;AAAA,MAQlBC,aARkB;;AAAA,oBASHvC,QAAQ,mBAAMmB,UAAN,EATL;AAAA;AAAA,MAS9BqB,SAT8B;AAAA,MASnBC,YATmB;;AAAA,oBAUbzC,QAAQ,CAAC,mBAAOI,aAAP,EAAD,CAVK;AAAA;AAAA,MAU9BsC,IAV8B;AAAA,MAUxBC,OAVwB,mBAYrC;AACA;;;AACAzC,EAAAA,SAAS,CAAC,YAAM;AACZ0C,IAAAA,KAAK,CAAC,mBAAD,CAAL,CACKC,IADL,CACU,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KADb,EAEKF,IAFL,CAEU,UAACG,MAAD,EAAY;AAAEnB,MAAAA,cAAc,oBAAMmB,MAAN,EAAd;AAAgC,KAFxD,EAGKC,KAHL,CAGW,UAACC,KAAD,EAAW;AAAE;AAAQ,KAHhC;AAIH,GALQ,EAKN,EALM,CAAT,CAdqC,CAqBrC;;AACA,MAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACrBxB,IAAAA,WAAW,CAAC,CAACD,QAAF,CAAX;AACH,GAFD,CAtBqC,CAyBrC;AACA;;;AACA,MAAM0B,WAAW,GAAG,SAAdA,WAAc,CAAClB,KAAD,EAAW;AAC3B,QAAIA,KAAK,KAAK,KAAd,EAAqB;AAAE;AAAQ;;AAC/BU,IAAAA,KAAK,CAAC,sBAAD,EAAyB;AAC1BS,MAAAA,MAAM,EAAE,MADkB;AAE1BX,MAAAA,IAAI,EAAEY,IAAI,CAACC,SAAL,CAAe;AAAErB,QAAAA,KAAK,EAALA;AAAF,OAAf,CAFoB;AAG1BsB,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAHiB,KAAzB,CAAL,CAKKX,IALL,CAKU,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KALb,EAMKF,IANL,CAMU,UAACG,MAAD,EAAY;AACdb,MAAAA,QAAQ,CAACa,MAAM,CAACd,KAAR,CAAR;AACAG,MAAAA,cAAc,CAACW,MAAM,CAACZ,WAAR,CAAd;AACAG,MAAAA,aAAa,CAACS,MAAM,CAACV,UAAR,CAAb;AACAG,MAAAA,YAAY,CAACO,MAAM,CAACR,SAAR,CAAZ;AACAG,MAAAA,OAAO,CAACK,MAAM,CAACN,IAAR,CAAP;AACH,KAZL,EAaKO,KAbL,CAaW,UAACC,KAAD,EAAW;AAAEO,MAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;AAAqB,KAb7C;AAcH,GAhBD,CA3BqC,CA6CrC;AACA;;;AACA,MAAMS,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,UAAD,EAAgB;AACtC,YAAQA,UAAU,CAAC9B,EAAnB;AACI,WAAK,OAAL;AACIE,QAAAA,cAAc,CAAC4B,UAAD,CAAd;AACA;;AACJ,WAAK,aAAL;AACI5B,QAAAA,cAAc,CAAC4B,UAAD,CAAd;AACA;;AACJ,WAAK,YAAL;AACI5B,QAAAA,cAAc,mBAAM4B,UAAN,EAAd;AACA;;AACJ,WAAK,WAAL;AACI5B,QAAAA,cAAc,CAAC4B,UAAD,CAAd;AACA;;AACJ,WAAK,MAAL;AACI5B,QAAAA,cAAc,CAAC4B,UAAD,CAAd;AACA;;AACJ,WAAK,OAAL;AACI5B,QAAAA,cAAc,CAAC4B,UAAD,CAAd;AACA;;AACJ;AACI;AApBR;AAsBH,GAvBD,CA/CqC,CAwErC;AACA;;;AACA,MAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AACvB1B,IAAAA,QAAQ,mBAAMD,KAAN;AAAaD,MAAAA,WAAW,EAAE;AAA1B,OAAR;AACH,GAFD,CA1EqC,CA8ErC;;;AACA,MAAM6B,UAAU,GAAG,SAAbA,UAAa,CAAEC,KAAF,EAASC,KAAT,EAAoB;AACnC,QAAIC,OAAO,GAAGvB,IAAd;AACAuB,IAAAA,OAAO,CAACD,KAAD,CAAP,CAAe3D,IAAf,GAAsB0D,KAAtB;AACApB,IAAAA,OAAO,oBAAMsB,OAAN,EAAP;AACH,GAJD,CA/EqC,CAqFrC;;;AACA,MAAMA,OAAO,GAAG,mBAAM;AAClB,QAAIA,OAAO,GAAGvB,IAAd;AACAuB,IAAAA,OAAO,CAACC,IAAR,mBAAkB9D,aAAlB;AACAuC,IAAAA,OAAO,oBAAMsB,OAAN,EAAP;AACH,GAJD,CAtFqC,CA4FrC;;;AACA,MAAME,WAAW,GAAG,SAAdA,WAAc,CAACJ,KAAD,EAAQC,KAAR,EAAkB;AAClC,QAAIC,OAAO,GAAGvB,IAAd;AACAuB,IAAAA,OAAO,CAACD,KAAD,CAAP,CAAe5C,GAAf,GAAqB2C,KAArB;AACApB,IAAAA,OAAO,oBAAMsB,OAAN,EAAP;AACH,GAJD,CA7FqC,CAmGrC;AACA;;;AACA,MAAMG,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACnB,QAAMH,OAAO,GAAGvB,IAAhB;AACAuB,IAAAA,OAAO,CAACC,IAAR,mBAAkB/C,UAAlB;AACAwB,IAAAA,OAAO,oBAAMsB,OAAN,EAAP;AACH,GAJD,CArGqC,CA2GrC;AACA;;;AACA,MAAMI,WAAW,GAAG,SAAdA,WAAc,CAAEC,CAAF,EAAKC,OAAL,EAAkB;AAClC,QAAIR,KAAK,GAAGO,CAAC,CAACE,MAAF,CAASC,KAArB;;AACA,YAAQF,OAAO,CAACG,EAAhB;AACI,WAAK,OAAL;AACIvC,QAAAA,QAAQ,mBAAMD,KAAN;AAAa7B,UAAAA,IAAI,EAAE0D;AAAnB,WAAR;AACA;;AACJ,WAAK,aAAL;AACI1B,QAAAA,cAAc,mBAAMD,WAAN;AAAmB/B,UAAAA,IAAI,EAAE0D;AAAzB,WAAd;AACA;;AACJ,WAAK,YAAL;AACIxB,QAAAA,aAAa,mBAAMD,UAAN;AAAkBjC,UAAAA,IAAI,EAAE0D;AAAxB,WAAb;AACA;;AACJ,WAAK,WAAL;AACItB,QAAAA,YAAY,mBAAMD,SAAN;AAAiBpB,UAAAA,GAAG,EAAE2C;AAAtB,WAAZ;AACA;;AACJ,WAAK,MAAL;AACID,QAAAA,UAAU,CAACC,KAAD,EAAQQ,OAAO,CAACP,KAAhB,CAAV;AACA;;AACJ,WAAK,OAAL;AACIG,QAAAA,WAAW,CAACJ,KAAD,EAAQQ,OAAO,CAACP,KAAhB,CAAX;AACA;;AACJ;AACI;AApBR;AAsBH,GAxBD,CA7GqC,CAuIrC;AACA;;;AACA,MAAMW,UAAU,GAAG,SAAbA,UAAa,CAAEC,OAAF,EAAe;AAC9B,YAAQ7C,WAAW,CAACD,EAApB;AACI,WAAK,OAAL;AACIK,QAAAA,QAAQ,mBAAMD,KAAN;AAAavB,UAAAA,IAAI,EAAEiE;AAAnB,WAAR;AACA;;AACJ,WAAK,aAAL;AACIvC,QAAAA,cAAc,mBAAMD,WAAN;AAAmBzB,UAAAA,IAAI,EAAEiE;AAAzB,WAAd;AACA;;AACJ,WAAK,YAAL;AACIrC,QAAAA,aAAa,mBAAMD,UAAN;AAAkB3B,UAAAA,IAAI,EAAEiE;AAAxB,WAAb;AACA;;AACJ,WAAK,MAAL;AACI,YAAIX,QAAO,GAAGvB,IAAd;AACAuB,QAAAA,QAAO,CAAClC,WAAW,CAACiC,KAAb,CAAP,CAA2BrD,IAA3B,GAAkCiE,OAAlC;AACAjC,QAAAA,OAAO,oBAAMsB,QAAN,EAAP;AACA;;AACJ;AACI;AAhBR;AAkBH,GAnBD,CAzIqC,CA8JrC;AACA;;;AACA,MAAMY,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAC7B,YAAQ/C,WAAW,CAACD,EAApB;AACI,WAAK,OAAL;AACIK,QAAAA,QAAQ,mBAAMD,KAAN,sBAAc4C,KAAd,EAAsB,CAAC5C,KAAK,CAAC4C,KAAD,CAA5B,GAAR;AACA;;AACJ,WAAK,MAAL;AACI,YAAIb,SAAO,GAAGvB,IAAd;AACAuB,QAAAA,SAAO,CAAClC,WAAW,CAACiC,KAAb,CAAP,CAA2Bc,KAA3B,IAAoC,CAACb,SAAO,CAAClC,WAAW,CAACiC,KAAb,CAAP,CAA2Bc,KAA3B,CAArC;AACAnC,QAAAA,OAAO,oBAAMsB,SAAN,EAAP;AACA;;AACJ;AACI;AAVR;AAYH,GAbD,CAhKqC,CA+KrC;AACA;;;AACA,MAAMc,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,aAAD,EAAmB;AACzC,QAAIjD,WAAW,CAACD,EAAZ,KAAmB,aAAvB,EAAsC;AAClC,cAAQkD,aAAR;AACI,aAAK,MAAL;AACI3C,UAAAA,cAAc,mBAAMD,WAAN;AAAmBxB,YAAAA,OAAO,EAAE;AAA5B,aAAd;AACA;;AACJ,aAAK,QAAL;AACIyB,UAAAA,cAAc,mBAAMD,WAAN;AAAmBxB,YAAAA,OAAO,EAAE;AAA5B,aAAd;AACA;;AACJ,aAAK,OAAL;AACIyB,UAAAA,cAAc,mBAAMD,WAAN;AAAmBxB,YAAAA,OAAO,EAAE;AAA5B,aAAd;AACA;;AACJ;AACIyB,UAAAA,cAAc,mBAAMD,WAAN;AAAmBxB,YAAAA,OAAO,EAAE;AAA5B,aAAd;AACA;AAZR;AAeH,KAhBD,MAgBO;AACH,cAAQoE,aAAR;AACI,aAAK,MAAL;AACIzC,UAAAA,aAAa,mBAAMD,UAAN;AAAkB1B,YAAAA,OAAO,EAAE;AAA3B,aAAb;AACA;;AACJ,aAAK,QAAL;AACI2B,UAAAA,aAAa,mBAAMD,UAAN;AAAkB1B,YAAAA,OAAO,EAAE;AAA3B,aAAb;AACA;;AACJ,aAAK,OAAL;AACI2B,UAAAA,aAAa,mBAAMD,UAAN;AAAkB1B,YAAAA,OAAO,EAAE;AAA3B,aAAb;AACA;;AACJ;AACI;AAXR;AAaH;AACJ,GAhCD,CAjLqC,CAmNrC;AACA;;;AACA,MAAMqE,kBAAkB,GAAG,SAArBA,kBAAqB,CAACD,aAAD,EAAmB;AAC1C,YAAQA,aAAR;AACI,WAAK,MAAL;AACIvC,QAAAA,YAAY,mBAAMD,SAAN;AAAiB5B,UAAAA,OAAO,EAAE;AAA1B,WAAZ;AACA;;AACJ,WAAK,QAAL;AACI6B,QAAAA,YAAY,mBAAMD,SAAN;AAAiB5B,UAAAA,OAAO,EAAE;AAA1B,WAAZ;AACA;;AACJ;AACI6B,QAAAA,YAAY,mBAAMD,SAAN;AAAiB5B,UAAAA,OAAO,EAAE;AAA1B,WAAZ;AACA;AATR;AAWH,GAZD,CArNqC,CAmOrC;AACA;;;AACA,MAAMsE,kBAAkB,GAAG,SAArBA,kBAAqB,CAACF,aAAD,EAAmB;AAC1C,QAAIf,OAAO,GAAGvB,IAAd;;AACA,YAAQsC,aAAR;AACI,WAAK,MAAL;AACIf,QAAAA,OAAO,CAAClC,WAAW,CAACiC,KAAb,CAAP,CAA2BpD,OAA3B,GAAqC,YAArC;AACA+B,QAAAA,OAAO,oBAAMsB,OAAN,EAAP;AACA;;AACJ,WAAK,YAAY,SAAjB;AACIA,QAAAA,OAAO,CAAClC,WAAW,CAACiC,KAAb,CAAP,CAA2BpD,OAA3B,GAAqC,QAArC;AACA+B,QAAAA,OAAO,oBAAMsB,OAAN,EAAP;AACA;;AACJ;AACIA,QAAAA,OAAO,CAAClC,WAAW,CAACiC,KAAb,CAAP,CAA2BpD,OAA3B,GAAqC,UAArC;AACA+B,QAAAA,OAAO,oBAAMsB,OAAN,EAAP;AACA;AAZR;AAcH,GAhBD,CArOqC,CAuPrC;AACA;;;AACA,MAAMkB,aAAa,GAAG,SAAhBA,aAAgB,CAACH,aAAD,EAAmB;AACrC,YAAQjD,WAAW,CAACD,EAApB;AACI,WAAK,OAAL;AACIK,QAAAA,QAAQ,mBAAMD,KAAN;AAAatB,UAAAA,OAAO,EAAEoE;AAAtB,WAAR;AACA;;AACJ,WAAK,aAAL;AACID,QAAAA,iBAAiB,CAACC,aAAD,CAAjB;AACA;;AACJ,WAAK,YAAL;AACID,QAAAA,iBAAiB,CAACC,aAAD,CAAjB;AACA;;AACJ,WAAK,WAAL;AACIC,QAAAA,kBAAkB,CAACD,aAAD,CAAlB;AACA;;AACJ,WAAK,MAAL;AACI,YAAIf,SAAO,GAAGvB,IAAd;AACAuB,QAAAA,SAAO,CAAClC,WAAW,CAACiC,KAAb,CAAP,CAA2BpD,OAA3B,GAAqCoE,aAArC;AACArC,QAAAA,OAAO,oBAAMsB,SAAN,EAAP;AACA;;AACJ,WAAK,OAAL;AACIiB,QAAAA,kBAAkB,CAACF,aAAD,CAAlB;AACA;;AACJ;AACI;AAtBR;AAwBH,GAzBD,CAzPqC,CAoRrC;AACA;;;AACA,MAAMI,eAAe,GAAG,SAAlBA,eAAkB,CAACN,KAAD,EAAW;AAC/B,YAAQ/C,WAAW,CAACD,EAApB;AACI,WAAK,OAAL;AACIK,QAAAA,QAAQ,mBAAMD,KAAN;AAAarB,UAAAA,SAAS,EAAEiE;AAAxB,WAAR;AACA;;AACJ,WAAK,MAAL;AACI,YAAIb,SAAO,GAAGvB,IAAd;AACAuB,QAAAA,SAAO,CAAClC,WAAW,CAACiC,KAAb,CAAP,CAA2BnD,SAA3B,GAAuCiE,KAAvC;AACAnC,QAAAA,OAAO,oBAAMsB,SAAN,EAAP;AACA;;AACJ;AACI;AAVR;AAYH,GAbD,CAtRqC,CAqSrC;AACA;;;AACA,MAAMoB,eAAe,GAAG,SAAlBA,eAAkB,CAAC5E,KAAD,EAAW;AAC/B,YAAQsB,WAAW,CAACD,EAApB;AACI,WAAK,OAAL;AACIK,QAAAA,QAAQ,mBAAMD,KAAN;AAAazB,UAAAA,KAAK,EAAEA;AAApB,WAAR;AACA;;AACJ,WAAK,aAAL;AACI4B,QAAAA,cAAc,mBAAMD,WAAN;AAAmB3B,UAAAA,KAAK,EAAEA;AAA1B,WAAd;AACA;;AACJ,WAAK,MAAL;AACI,YAAIwD,SAAO,GAAGvB,IAAd;AACAuB,QAAAA,SAAO,CAAClC,WAAW,CAACiC,KAAb,CAAP,CAA2BvD,KAA3B,GAAmCA,KAAnC;AACAkC,QAAAA,OAAO,oBAAMsB,SAAN,EAAP;AACA;;AACJ;AACI;AAbR;AAeH,GAhBD,CAvSqC,CAyTrC;AACA;;;AACA,MAAMqB,eAAe,GAAG,SAAlBA,eAAkB,CAAChB,CAAD,EAAO;AAC3B,QAAIvC,WAAW,CAACD,EAAZ,KAAmB,OAAvB,EAAgC;AAC5B,aAAOK,QAAQ,mBAAMD,KAAN;AAAapB,QAAAA,SAAS,EAAEwD,CAAC,CAACE,MAAF,CAASC;AAAjC,SAAf;AACH,KAFD,MAEO,IAAM1C,WAAW,CAACD,EAAZ,KAAmB,MAApB,IAAgCC,WAAW,CAACD,EAAZ,KAAmB,OAAxD,EAAmE;AACtE,UAAImC,SAAO,GAAGvB,IAAd;AACAuB,MAAAA,SAAO,CAAClC,WAAW,CAACiC,KAAb,CAAP,CAA2BlD,SAA3B,GAAuCwD,CAAC,CAACE,MAAF,CAASC,KAAhD;AACA,aAAO9B,OAAO,oBAAMsB,SAAN,EAAd;AACH;AACJ,GARD,CA3TqC,CAqUrC;AACA;;;AACA,MAAMsB,kBAAkB,GAAG,SAArBA,kBAAqB,CAACjB,CAAD,EAAO;AAC9B,QAAIvC,WAAW,CAACD,EAAZ,KAAmB,OAAvB,EAAgC;AAC5B,aAAOK,QAAQ,mBAAMD,KAAN;AAAanB,QAAAA,YAAY,EAAEuD,CAAC,CAACE,MAAF,CAASC;AAApC,SAAf;AACH,KAFD,MAEO,IAAM1C,WAAW,CAACD,EAAZ,KAAmB,MAApB,IAAgCC,WAAW,CAACD,EAAZ,KAAmB,OAAxD,EAAmE;AACtE,UAAImC,SAAO,GAAGvB,IAAd;AACAuB,MAAAA,SAAO,CAAClC,WAAW,CAACiC,KAAb,CAAP,CAA2BjD,YAA3B,GAA0CuD,CAAC,CAACE,MAAF,CAASC,KAAnD;AACA,aAAO9B,OAAO,oBAAMsB,SAAN,EAAd;AACH;AACJ,GARD,CAvUqC,CAiVrC;;;AACA,SACI,oBAAC,aAAD,CAAe,QAAf;AACI,IAAA,KAAK,EAAE;AACHI,MAAAA,WAAW,EAAXA,WADG;AAEHQ,MAAAA,aAAa,EAAbA,aAFG;AAGHF,MAAAA,UAAU,EAAVA,UAHG;AAIHQ,MAAAA,aAAa,EAAbA,aAJG;AAKHC,MAAAA,eAAe,EAAfA,eALG;AAMHC,MAAAA,eAAe,EAAfA,eANG;AAOHC,MAAAA,eAAe,EAAfA,eAPG;AAQHC,MAAAA,kBAAkB,EAAlBA,kBARG;AASHpC,MAAAA,UAAU,EAAVA,UATG;AAUHQ,MAAAA,iBAAiB,EAAjBA,iBAVG;AAWH5B,MAAAA,WAAW,EAAXA,WAXG;AAYH8B,MAAAA,YAAY,EAAZA,YAZG;AAaHjC,MAAAA,WAAW,EAAXA,WAbG;AAcHF,MAAAA,QAAQ,EAARA,QAdG;AAeH0B,MAAAA,WAAW,EAAXA,WAfG;AAgBHa,MAAAA,OAAO,EAAPA,OAhBG;AAiBHG,MAAAA,QAAQ,EAARA,QAjBG;AAkBHlC,MAAAA,KAAK,EAALA,KAlBG;AAmBHE,MAAAA,WAAW,EAAXA,WAnBG;AAoBHE,MAAAA,UAAU,EAAVA,UApBG;AAqBHE,MAAAA,SAAS,EAATA,SArBG;AAsBHE,MAAAA,IAAI,EAAJA;AAtBG,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA2BKjB,KAAK,CAAC+D,QA3BX,CADJ;AAgCH,CAlXM","sourcesContent":["import React, {\n    useState,\n    createContext,\n    useEffect\n} from 'react';\n\nexport const EditorContext = createContext();\n\n// The initial state for text elements\nconst intialPreview = {\n    text: '',\n    bold: false,\n    italic: false,\n    underline: false,\n    color: 'black',\n    highlight: false,\n    font: 'Roboto',\n    justify: 'left',\n    textStyle: 'body1',\n    marginTop: 40,\n    marginBottom: 0,\n    isText: true,\n    isImage: false,\n};\n// The initial state for Info\nconst initialInfo = {\n    text: '',\n    font: 'Roboto',\n    justify: 'center',\n    color: '',\n};\n// The initial state for Images\nconst initialImg = {\n    isImage: true,\n    src: '',\n    alt: '',\n    height: '',\n    width: '',\n    justify: 'center',\n    marginTop: 40,\n    marginBottom: 0,\n};\n\nexport const EditorProvider = (props) => {\n\n    const [editMode, setEditMode] = useState(false);\n    const [articleList, setArticleList] = useState('');\n\n    const [sectionMode, setSectionMode] = useState({ el: 'title' });\n    const [title, setTitle] = useState({ ...intialPreview, isPublished: false });\n    const [description, setDescription] = useState({ ...initialInfo, textStyle: 'h5' });\n    const [readLength, setReadLength] = useState({ ...initialInfo });\n    const [jumbotron, setJumbotron] = useState({ ...initialImg });\n    const [body, setBody] = useState([ { ...intialPreview } ]);\n    \n    // Once component mounts it will fetch a list of the\n    // top ten most recent articles\n    useEffect(() => {\n        fetch('/api/blog/getList')\n            .then(res => res.json())\n            .then((result) => { setArticleList([ ...result ]); })\n            .catch((error) => { return });\n    }, []);\n\n    // Function toggles edit mode on or off\n    const handleMode = () => {\n        setEditMode(!editMode);\n    };\n    // Once the user clicks on the article they wish to edit, it will then\n    // grab the article elements and set them to state.\n    const editArticle = (title) => {\n        if (title === 'new') { return }\n        fetch('/api/blog/getArticle', {\n            method: 'POST',\n            body: JSON.stringify({ title }),\n            headers: { 'Content-Type': 'application/json' },\n        })\n            .then(res => res.json())\n            .then((result) => {\n                setTitle(result.title);\n                setDescription(result.description);\n                setReadLength(result.readLength);\n                setJumbotron(result.jumbotron);\n                setBody(result.body);\n            })\n            .catch((error) => { console.log(error); });\n    };\n\n    // Once the user clicks on any element. The \"section mode\" will\n    // switch to the appropriate state to handle further edits within the element\n    const handleSectionMode = (newSection) => {\n        switch (newSection.el) {\n            case 'title':\n                setSectionMode(newSection);\n                break;\n            case 'description':\n                setSectionMode(newSection);\n                break;\n            case 'readLength':\n                setSectionMode({ ...newSection });\n                break;\n            case 'jumbotron':\n                setSectionMode(newSection);\n                break;\n            case 'body':\n                setSectionMode(newSection);\n                break;\n            case 'image':\n                setSectionMode(newSection);\n                break;\n            default:\n                return;\n        }\n    };\n\n    // This function will set the Title state to published if the article\n    // was successfully stored within the database\n    const setPublished = () => {\n        setTitle({ ...title, isPublished: true });\n    };\n\n    // This function will handle the user input then update the Body state\n    const handleBody = ( input, index ) => {\n        let newBody = body;\n        newBody[index].text = input;\n        setBody([ ...newBody ]);\n    };\n\n    // This function will create a new body element within the state\n    const newBody = () => {\n        let newBody = body;\n        newBody.push({ ...intialPreview });\n        setBody([ ...newBody ]);\n    };\n\n    // This function will store the url posted within the input and update the state\n    const handleImage = (input, index) => {\n        let newBody = body;\n        newBody[index].src = input;\n        setBody([ ...newBody ]);\n    };\n\n    // This function will create a new Image element within the\n    // Body and update the state\n    const newImgEl = () => {\n        const newBody = body;\n        newBody.push({ ...initialImg });\n        setBody([ ...newBody ]);\n    };\n\n    // This function will check which section the user has selected and\n    // update the state with the new input\n    const handleInput = ( e, section ) => {\n        let input = e.target.value;\n        switch (section.El) {\n            case 'title':\n                setTitle({ ...title, text: input });\n                break;\n            case 'description':\n                setDescription({ ...description, text: input });\n                break;\n            case 'readLength':\n                setReadLength({ ...readLength, text: input });\n                break;\n            case 'jumbotron':\n                setJumbotron({ ...jumbotron, src: input });\n                break;\n            case 'body':\n                handleBody(input, section.index);\n                break;\n            case 'image':\n                handleImage(input, section.index);\n                break;\n            default:\n                return\n        }\n    };\n\n    // This function will check which section the user is in and\n    // change the font value to the selected font\n    const handleFont = ( newFont ) => {\n        switch (sectionMode.el) {\n            case 'title':\n                setTitle({ ...title, font: newFont });\n                break;\n            case 'description':\n                setDescription({ ...description, font: newFont });\n                break;\n            case 'readLength':\n                setReadLength({ ...readLength, font: newFont });\n                break;\n            case 'body':\n                let newBody = body;\n                newBody[sectionMode.index].font = newFont;\n                setBody([ ...newBody ]);\n                break;\n            default:\n                break;\n        }\n    };\n\n    // This function will check with section the user is in\n    // and update the value with the new selected value\n    const handleStyling = (style) => {\n        switch (sectionMode.el) {\n            case 'title':\n                setTitle({ ...title, [style]: !title[style] });\n                break;\n            case 'body':\n                let newBody = body;\n                newBody[sectionMode.index][style] = !newBody[sectionMode.index][style];    \n                setBody([ ...newBody ]);   \n                break;\n            default:\n                break;\n        }\n    };\n\n    // This function will check with section the user is in\n    // and update the value with the new selected value\n    const handleInfoJustify = (justification) => {\n        if (sectionMode.el === 'description') {\n            switch (justification) {\n                case 'left':\n                    setDescription({ ...description, justify: 'left' });\n                    break;\n                case 'center':\n                    setDescription({ ...description, justify: 'center' });\n                    break;\n                case 'right':\n                    setDescription({ ...description, justify: 'right' });\n                    break;\n                default:\n                    setDescription({ ...description, justify: 'justify' });\n                    break;\n    \n            }\n        } else {\n            switch (justification) {\n                case 'left':\n                    setReadLength({ ...readLength, justify: 'flex-start' });\n                    break;\n                case 'center':\n                    setReadLength({ ...readLength, justify: 'center' });\n                    break;\n                case 'right':\n                    setReadLength({ ...readLength, justify: 'flex-end' });\n                    break;\n                default:\n                    return;\n            }\n        }\n    };\n\n    // This function will check with section the user is in\n    // and update the value with the new selected value\n    const handleJumboJustify = (justification) => {\n        switch (justification) {\n            case 'left':\n                setJumbotron({ ...jumbotron, justify: 'flex-start' });\n                break;\n            case 'center':\n                setJumbotron({ ...jumbotron, justify: 'center' });\n                break;\n            default:\n                setJumbotron({ ...jumbotron, justify: 'flex-end' });\n                break;\n        }\n    };\n\n    // This function will check with section the user is in\n    // and update the value with the new selected value\n    const handleImageJustify = (justification) => {\n        let newBody = body;\n        switch (justification) {\n            case 'left':\n                newBody[sectionMode.index].justify = 'flex-start';\n                setBody([ ...newBody ]);\n                break;\n            case 'center' || 'justify':\n                newBody[sectionMode.index].justify = 'center';\n                setBody([ ...newBody ]);\n                break;\n            default:\n                newBody[sectionMode.index].justify = 'flex-end';\n                setBody([ ...newBody ]);\n                break;\n        }\n    };\n\n    // This function will check with section the user is in\n    // and update the value with the new selected value\n    const handleJustify = (justification) => {\n        switch (sectionMode.el) {\n            case 'title':\n                setTitle({ ...title, justify: justification });\n                break;\n            case 'description':\n                handleInfoJustify(justification);\n                break;\n            case 'readLength':\n                handleInfoJustify(justification);\n                break;\n            case 'jumbotron':\n                handleJumboJustify(justification);\n                break;\n            case 'body':\n                let newBody = body;\n                newBody[sectionMode.index].justify = justification;    \n                setBody([ ...newBody ]);\n                break;\n            case 'image':\n                handleImageJustify(justification);\n                break;\n            default:\n                break;\n        }\n    };\n\n    // This function will check with section the user is in\n    // and update the value with the new selected value\n    const handleTextStyle = (style) => {\n        switch (sectionMode.el) {\n            case 'title':\n                setTitle({ ...title, textStyle: style });\n                break;\n            case 'body':\n                let newBody = body;\n                newBody[sectionMode.index].textStyle = style;    \n                setBody([ ...newBody ]);\n                break;\n            default:\n                break;\n        }\n    };\n\n    // This function will check with section the user is in\n    // and update the value with the new selected value\n    const handleTextColor = (color) => {\n        switch (sectionMode.el) {\n            case 'title':\n                setTitle({ ...title, color: color });\n                break;\n            case 'description':\n                setDescription({ ...description, color: color });\n                break;\n            case 'body':\n                let newBody = body;\n                newBody[sectionMode.index].color = color;\n                setBody([ ...newBody ]);\n                break;\n            default:\n                break;\n        }\n    };\n\n    // This function will check with section the user is in\n    // and update the value with the new selected value\n    const handleMarginTop = (e) => {\n        if (sectionMode.el === 'title') {\n            return setTitle({ ...title, marginTop: e.target.value });\n        } else if ( (sectionMode.el === 'body') || (sectionMode.el === 'image') ) {\n            let newBody = body;\n            newBody[sectionMode.index].marginTop = e.target.value;\n            return setBody([ ...newBody ]);\n        }\n    };\n\n    // This function will check with section the user is in\n    // and update the value with the new selected value\n    const handleMarginBottom = (e) => {\n        if (sectionMode.el === 'title') {\n            return setTitle({ ...title, marginBottom: e.target.value });\n        } else if ( (sectionMode.el === 'body') || (sectionMode.el === 'image') ) {\n            let newBody = body;\n            newBody[sectionMode.index].marginBottom = e.target.value;\n            return setBody([ ...newBody ]);\n        }\n    };\n\n    // All functions and variables listed will be shared with the child consumers\n    return (\n        <EditorContext.Provider\n            value={{\n                handleInput,\n                handleStyling,\n                handleFont,\n                handleJustify,\n                handleTextStyle,\n                handleTextColor,\n                handleMarginTop,\n                handleMarginBottom,\n                handleMode,\n                handleSectionMode,\n                sectionMode,\n                setPublished,\n                articleList,\n                editMode,\n                editArticle,\n                newBody,\n                newImgEl,\n                title,\n                description,\n                readLength,\n                jumbotron,\n                body,\n            }}\n        >\n\n            {props.children}\n\n        </EditorContext.Provider>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}