{"ast":null,"code":"import _slicedToArray from \"/Users/God/Desktop/github/Port/portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/God/Desktop/github/Port/portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/God/Desktop/github/Port/portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/God/Desktop/github/Port/portfolio/client/src/context/Story.js\";\nimport React from 'react';\nimport io from 'socket.io-client';\nexport var CTX = React.createContext();\nvar initState = {\n  chats: [{}]\n};\n\nfunction reducer(state, action) {\n  var _action$payload$msg = action.payload.msg,\n      from = _action$payload$msg.from,\n      msg = _action$payload$msg.msg,\n      to = _action$payload$msg.to;\n  console.log(from, msg, to);\n\n  switch (action.type) {\n    case 'RECIEVE_MESSAGE':\n      var newState = _objectSpread({}, state, {\n        chats: [].concat(_toConsumableArray(state.chats), [state.chats[to] = {\n          from: from,\n          msg: msg\n        }])\n      });\n\n      return {\n        newState: newState\n      };\n\n    default:\n      return state;\n  }\n}\n\nvar socket;\n\nfunction sendChatAction(value) {\n  socket.emit('chat message', value);\n}\n\nfunction Store(props) {\n  var _React$useReducer = React.useReducer(reducer, initState),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      allChats = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  if (props.username) {\n    socket.emit('new user', props.username);\n  }\n\n  if (!socket) {\n    socket = io(':3001');\n    socket.on('chat message', function (res) {\n      console.log(res);\n      dispatch({\n        type: 'RECIEVE_MESSAGE',\n        payload: res\n      });\n    });\n  }\n\n  var user = props.username ? props.username.username : 'Anon';\n  return React.createElement(CTX.Provider, {\n    value: {\n      allChats: allChats,\n      sendChatAction: sendChatAction,\n      user: user\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, props.children);\n}\n\nexport default Store;","map":{"version":3,"sources":["/Users/God/Desktop/github/Port/portfolio/client/src/context/Story.js"],"names":["React","io","CTX","createContext","initState","chats","reducer","state","action","payload","msg","from","to","console","log","type","newState","socket","sendChatAction","value","emit","Store","props","useReducer","allChats","dispatch","username","on","res","user","children"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,OAAQ,IAAMC,GAAG,GAAGF,KAAK,CAACG,aAAN,EAAZ;AAER,IAAMC,SAAS,GAAG;AACdC,EAAAA,KAAK,EAAE,CACH,EADG;AADO,CAAlB;;AAQA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAAA,4BACFA,MAAM,CAACC,OAAP,CAAeC,GADb;AAAA,MACpBC,IADoB,uBACpBA,IADoB;AAAA,MACdD,GADc,uBACdA,GADc;AAAA,MACTE,EADS,uBACTA,EADS;AAG5BC,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ,EAAkBD,GAAlB,EAAuBE,EAAvB;;AACA,UAAOJ,MAAM,CAACO,IAAd;AACI,SAAK,iBAAL;AACI,UAAMC,QAAQ,qBACPT,KADO;AAEVF,QAAAA,KAAK,+BAAOE,KAAK,CAACF,KAAb,IAAoBE,KAAK,CAACF,KAAN,CAAYO,EAAZ,IAAkB;AAACD,UAAAA,IAAI,EAAJA,IAAD;AAAOD,UAAAA,GAAG,EAAHA;AAAP,SAAtC;AAFK,QAAd;;AAIA,aAAO;AACHM,QAAAA,QAAQ,EAARA;AADG,OAAP;;AAGJ;AACI,aAAOT,KAAP;AAVR;AAYH;;AACD,IAAIU,MAAJ;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC3BF,EAAAA,MAAM,CAACG,IAAP,CAAY,cAAZ,EAA4BD,KAA5B;AACH;;AAED,SAASE,KAAT,CAAeC,KAAf,EAAsB;AAAA,0BAEWtB,KAAK,CAACuB,UAAN,CAAiBjB,OAAjB,EAA0BF,SAA1B,CAFX;AAAA;AAAA,MAEXoB,QAFW;AAAA,MAEDC,QAFC;;AAIlB,MAAGH,KAAK,CAACI,QAAT,EAAmB;AACfT,IAAAA,MAAM,CAACG,IAAP,CAAY,UAAZ,EAAwBE,KAAK,CAACI,QAA9B;AACH;;AAED,MAAI,CAACT,MAAL,EAAa;AACTA,IAAAA,MAAM,GAAGhB,EAAE,CAAC,OAAD,CAAX;AAEAgB,IAAAA,MAAM,CAACU,EAAP,CAAU,cAAV,EAA0B,UAASC,GAAT,EAAc;AACpCf,MAAAA,OAAO,CAACC,GAAR,CAAYc,GAAZ;AACAH,MAAAA,QAAQ,CAAC;AAACV,QAAAA,IAAI,EAAE,iBAAP;AAA0BN,QAAAA,OAAO,EAAEmB;AAAnC,OAAD,CAAR;AACH,KAHD;AAIH;;AAED,MAAMC,IAAI,GAAGP,KAAK,CAACI,QAAN,GAAiBJ,KAAK,CAACI,QAAN,CAAeA,QAAhC,GAA2C,MAAxD;AAEA,SACI,oBAAC,GAAD,CAAK,QAAL;AAAc,IAAA,KAAK,EAAE;AAACF,MAAAA,QAAQ,EAARA,QAAD;AAAWN,MAAAA,cAAc,EAAdA,cAAX;AAA2BW,MAAAA,IAAI,EAAJA;AAA3B,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKP,KAAK,CAACQ,QADX,CADJ;AAKH;;AAED,eAAeT,KAAf","sourcesContent":["import React from 'react';\nimport io from 'socket.io-client';\n\nexport  const CTX = React.createContext();\n\nconst initState = {\n    chats: [\n        {\n\n        }\n    ]\n}\n\nfunction reducer(state, action) {\n    const { from, msg, to } = action.payload.msg;\n\n    console.log(from, msg, to);\n    switch(action.type) {\n        case 'RECIEVE_MESSAGE':\n            const newState = {\n                ...state,\n                chats: [ ...state.chats, state.chats[to] = {from, msg}]\n            }\n            return {\n                newState\n            }\n        default:\n            return state\n    }\n}\nlet socket;\n\nfunction sendChatAction(value) {\n    socket.emit('chat message', value)\n}\n\nfunction Store(props) {\n\n    const [allChats, dispatch] = React.useReducer(reducer, initState);\n    \n    if(props.username) {\n        socket.emit('new user', props.username)\n    }\n\n    if (!socket) {\n        socket = io(':3001');\n\n        socket.on('chat message', function(res) {\n            console.log(res)\n            dispatch({type: 'RECIEVE_MESSAGE', payload: res});\n        })\n    }\n\n    const user = props.username ? props.username.username : 'Anon';\n\n    return (\n        <CTX.Provider value={{allChats, sendChatAction, user}}>\n            {props.children}\n        </CTX.Provider>\n    )\n}\n\nexport default Store"]},"metadata":{},"sourceType":"module"}